Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00467/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> MA-MGH-00467/host_removal/MA-MGH-00467_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	6299	CTGTCTCTTATA	413013	1.53
smallRNA	0	TGGAATTCTCGG	413013	0.00
Illumina	0	AGATCGGAAGAGC	413013	0.00
Using Nextera adapter for trimming (count: 6299). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00467/adapter_trimmed/MA-MGH-00467_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00467/host_removal/MA-MGH-00467_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to MA-MGH-00467_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00467/host_removal/MA-MGH-00467_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00467/host_removal/MA-MGH-00467_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 5.928 s (14.352 µs/read; 4.18 M reads/minute).

=== Summary ===

Total reads processed:                 413,013
Reads with adapters:                   115,644 (28.0%)
Reads written (passing filters):       413,013 (100.0%)

Total basepairs processed:    41,714,313 bp
Quality-trimmed:                 898,879 bp (2.2%)
Total written (filtered):     40,377,291 bp (96.8%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 115644 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 29.1%
  C: 20.6%
  G: 23.8%
  T: 26.5%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	76047	103253.2	0	76047
2	23216	25813.3	0	23216
3	6432	6453.3	0	6432
4	2263	1613.3	0	2263
5	515	403.3	0	515
6	176	100.8	0	176
7	137	25.2	0	137
8	127	6.3	0	127
9	96	1.6	0	95 1
10	133	0.4	1	86 47
11	89	0.1	1	88 1
12	99	0.0	1	95 4
13	88	0.0	1	86 2
14	106	0.0	1	102 4
15	107	0.0	1	107
16	102	0.0	1	101 1
17	77	0.0	1	76 1
18	86	0.0	1	85 1
19	71	0.0	1	69 2
20	85	0.0	1	85
21	73	0.0	1	70 3
22	72	0.0	1	72
23	111	0.0	1	107 4
24	90	0.0	1	88 2
25	103	0.0	1	99 4
26	92	0.0	1	91 1
27	99	0.0	1	97 2
28	87	0.0	1	85 2
29	78	0.0	1	75 3
30	78	0.0	1	77 1
31	76	0.0	1	71 5
32	89	0.0	1	89
33	84	0.0	1	82 2
34	111	0.0	1	105 6
35	122	0.0	1	120 2
36	74	0.0	1	72 2
37	109	0.0	1	106 3
38	92	0.0	1	92
39	88	0.0	1	86 2
40	118	0.0	1	114 4
41	114	0.0	1	114
42	88	0.0	1	88
43	111	0.0	1	108 3
44	100	0.0	1	100
45	198	0.0	1	195 3
46	51	0.0	1	51
47	108	0.0	1	107 1
48	126	0.0	1	123 3
49	139	0.0	1	136 3
50	94	0.0	1	91 3
51	140	0.0	1	137 3
52	113	0.0	1	112 1
53	133	0.0	1	131 2
54	134	0.0	1	134
55	195	0.0	1	192 3
56	126	0.0	1	125 1
57	157	0.0	1	156 1
58	134	0.0	1	133 1
59	235	0.0	1	231 4
60	94	0.0	1	94
61	87	0.0	1	87
62	204	0.0	1	200 4
63	141	0.0	1	140 1
64	72	0.0	1	72
65	129	0.0	1	128 1
66	99	0.0	1	99
67	47	0.0	1	47
68	104	0.0	1	104
69	106	0.0	1	105 1
70	109	0.0	1	108 1
72	4	0.0	1	4
73	16	0.0	1	16
74	14	0.0	1	14
75	3	0.0	1	3
76	2	0.0	1	2
77	5	0.0	1	1 4
79	2	0.0	1	1 1
80	1	0.0	1	1
81	4	0.0	1	2 2
84	2	0.0	1	0 2
86	1	0.0	1	1
88	3	0.0	1	2 1
99	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00467/host_removal/MA-MGH-00467_R1.fastq.gz
=============================================
413013 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00467/adapter_trimmed/MA-MGH-00467_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00467/host_removal/MA-MGH-00467_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to MA-MGH-00467_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00467/host_removal/MA-MGH-00467_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00467/host_removal/MA-MGH-00467_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 6.194 s (14.998 µs/read; 4.00 M reads/minute).

=== Summary ===

Total reads processed:                 413,013
Reads with adapters:                   116,771 (28.3%)
Reads written (passing filters):       413,013 (100.0%)

Total basepairs processed:    41,714,313 bp
Quality-trimmed:                 563,991 bp (1.4%)
Total written (filtered):     40,715,184 bp (97.6%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 116771 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 29.9%
  C: 20.4%
  G: 23.6%
  T: 26.1%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	76975	103253.2	0	76975
2	23377	25813.3	0	23377
3	6414	6453.3	0	6414
4	2266	1613.3	0	2266
5	476	403.3	0	476
6	205	100.8	0	205
7	144	25.2	0	144
8	124	6.3	0	124
9	97	1.6	0	96 1
10	131	0.4	1	85 46
11	94	0.1	1	90 4
12	98	0.0	1	92 6
13	88	0.0	1	87 1
14	105	0.0	1	102 3
15	113	0.0	1	110 3
16	102	0.0	1	94 8
17	85	0.0	1	84 1
18	82	0.0	1	82
19	76	0.0	1	74 2
20	86	0.0	1	85 1
21	73	0.0	1	71 2
22	76	0.0	1	71 5
23	112	0.0	1	107 5
24	90	0.0	1	88 2
25	102	0.0	1	101 1
26	95	0.0	1	94 1
27	101	0.0	1	99 2
28	88	0.0	1	83 5
29	83	0.0	1	78 5
30	80	0.0	1	80
31	68	0.0	1	67 1
32	94	0.0	1	92 2
33	99	0.0	1	96 3
34	99	0.0	1	97 2
35	100	0.0	1	99 1
36	101	0.0	1	99 2
37	107	0.0	1	103 4
38	99	0.0	1	95 4
39	91	0.0	1	91
40	115	0.0	1	113 2
41	116	0.0	1	116
42	110	0.0	1	104 6
43	97	0.0	1	94 3
44	614	0.0	1	604 10
45	106	0.0	1	103 3
46	63	0.0	1	61 2
47	130	0.0	1	130
48	34	0.0	1	34
49	98	0.0	1	97 1
50	16	0.0	1	16
51	46	0.0	1	44 2
52	27	0.0	1	26 1
53	133	0.0	1	130 3
54	209	0.0	1	209
55	49	0.0	1	49
56	147	0.0	1	146 1
57	345	0.0	1	344 1
58	97	0.0	1	97
59	101	0.0	1	100 1
60	325	0.0	1	323 2
61	102	0.0	1	101 1
62	46	0.0	1	42 4
63	174	0.0	1	172 2
64	330	0.0	1	326 4
65	58	0.0	1	58
66	41	0.0	1	40 1
67	23	0.0	1	21 2
68	17	0.0	1	17
69	22	0.0	1	22
70	38	0.0	1	37 1
71	10	0.0	1	9 1
72	6	0.0	1	6
73	10	0.0	1	9 1
74	1	0.0	1	1
75	1	0.0	1	1
76	1	0.0	1	1
77	2	0.0	1	1 1
79	1	0.0	1	1
80	2	0.0	1	2
81	2	0.0	1	2
83	1	0.0	1	0 1
84	2	0.0	1	0 2
86	4	0.0	1	1 3
88	2	0.0	1	2
93	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00467/host_removal/MA-MGH-00467_R2.fastq.gz
=============================================
413013 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files MA-MGH-00467_R1_trimmed.fq.gz and MA-MGH-00467_R2_trimmed.fq.gz
file_1: MA-MGH-00467_R1_trimmed.fq.gz, file_2: MA-MGH-00467_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: MA-MGH-00467_R1_trimmed.fq.gz and MA-MGH-00467_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to MA-MGH-00467_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to MA-MGH-00467_R2_val_2.fq.gz

Total number of sequences analysed: 413013

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1272 (0.31%)


  >>> Now running FastQC on the validated data MA-MGH-00467_R1_val_1.fq.gz<<<

Started analysis of MA-MGH-00467_R1_val_1.fq.gz
Approx 5% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 10% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 15% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 20% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 25% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 30% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 35% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 40% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 45% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 50% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 55% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 60% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 65% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 70% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 75% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 80% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 85% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 90% complete for MA-MGH-00467_R1_val_1.fq.gz
Approx 95% complete for MA-MGH-00467_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data MA-MGH-00467_R2_val_2.fq.gz<<<

Started analysis of MA-MGH-00467_R2_val_2.fq.gz
Approx 5% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 10% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 15% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 20% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 25% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 30% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 35% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 40% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 45% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 50% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 55% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 60% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 65% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 70% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 75% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 80% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 85% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 90% complete for MA-MGH-00467_R2_val_2.fq.gz
Approx 95% complete for MA-MGH-00467_R2_val_2.fq.gz
Deleting both intermediate output files MA-MGH-00467_R1_trimmed.fq.gz and MA-MGH-00467_R2_trimmed.fq.gz

====================================================================================================

