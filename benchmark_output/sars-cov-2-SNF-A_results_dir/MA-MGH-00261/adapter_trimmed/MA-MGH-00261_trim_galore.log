Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00261/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> MA-MGH-00261/host_removal/MA-MGH-00261_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	5408	CTGTCTCTTATA	88420	6.12
Illumina	0	AGATCGGAAGAGC	88420	0.00
smallRNA	0	TGGAATTCTCGG	88420	0.00
Using Nextera adapter for trimming (count: 5408). Second best hit was Illumina (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00261/adapter_trimmed/MA-MGH-00261_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00261/host_removal/MA-MGH-00261_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to MA-MGH-00261_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00261/host_removal/MA-MGH-00261_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00261/host_removal/MA-MGH-00261_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.218 s (13.775 µs/read; 4.36 M reads/minute).

=== Summary ===

Total reads processed:                  88,420
Reads with adapters:                    29,307 (33.1%)
Reads written (passing filters):        88,420 (100.0%)

Total basepairs processed:     8,930,420 bp
Quality-trimmed:                  78,850 bp (0.9%)
Total written (filtered):      8,620,074 bp (96.5%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 29307 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 21.9%
  C: 25.5%
  G: 26.7%
  T: 25.9%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	15837	22105.0	0	15837
2	4849	5526.2	0	4849
3	1328	1381.6	0	1328
4	463	345.4	0	463
5	258	86.3	0	258
6	164	21.6	0	164
7	152	5.4	0	152
8	173	1.3	0	173
9	173	0.3	0	173
10	167	0.1	1	161 6
11	157	0.0	1	156 1
12	202	0.0	1	194 8
13	165	0.0	1	161 4
14	168	0.0	1	160 8
15	147	0.0	1	145 2
16	171	0.0	1	163 8
17	132	0.0	1	130 2
18	139	0.0	1	135 4
19	134	0.0	1	132 2
20	143	0.0	1	142 1
21	131	0.0	1	127 4
22	119	0.0	1	116 3
23	155	0.0	1	153 2
24	110	0.0	1	109 1
25	130	0.0	1	127 3
26	120	0.0	1	118 2
27	130	0.0	1	128 2
28	127	0.0	1	125 2
29	127	0.0	1	124 3
30	114	0.0	1	112 2
31	128	0.0	1	127 1
32	117	0.0	1	111 6
33	127	0.0	1	126 1
34	117	0.0	1	113 4
35	110	0.0	1	109 1
36	110	0.0	1	108 2
37	76	0.0	1	76
38	112	0.0	1	111 1
39	101	0.0	1	96 5
40	85	0.0	1	84 1
41	93	0.0	1	89 4
42	81	0.0	1	79 2
43	99	0.0	1	98 1
44	77	0.0	1	74 3
45	143	0.0	1	140 3
46	22	0.0	1	22
47	71	0.0	1	68 3
48	77	0.0	1	74 3
49	66	0.0	1	65 1
50	69	0.0	1	65 4
51	93	0.0	1	93
52	63	0.0	1	61 2
53	59	0.0	1	59
54	60	0.0	1	55 5
55	75	0.0	1	71 4
56	42	0.0	1	39 3
57	81	0.0	1	78 3
58	65	0.0	1	64 1
59	68	0.0	1	65 3
60	46	0.0	1	41 5
61	31	0.0	1	31
62	57	0.0	1	50 7
63	43	0.0	1	42 1
64	50	0.0	1	49 1
65	25	0.0	1	25
66	29	0.0	1	29
67	20	0.0	1	18 2
68	19	0.0	1	19
69	24	0.0	1	24
70	31	0.0	1	29 2
71	1	0.0	1	1
72	3	0.0	1	3
73	7	0.0	1	7
74	6	0.0	1	6
75	2	0.0	1	1 1
77	7	0.0	1	1 6
78	1	0.0	1	0 1
80	2	0.0	1	2
81	1	0.0	1	0 1
82	8	0.0	1	0 8
83	5	0.0	1	0 5
84	4	0.0	1	4
85	3	0.0	1	1 2
90	2	0.0	1	1 1
91	1	0.0	1	0 1
93	2	0.0	1	0 2
94	1	0.0	1	0 1
95	3	0.0	1	0 3
99	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00261/host_removal/MA-MGH-00261_R1.fastq.gz
=============================================
88420 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00261/adapter_trimmed/MA-MGH-00261_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00261/host_removal/MA-MGH-00261_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to MA-MGH-00261_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00261/host_removal/MA-MGH-00261_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00261/host_removal/MA-MGH-00261_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.287 s (14.556 µs/read; 4.12 M reads/minute).

=== Summary ===

Total reads processed:                  88,420
Reads with adapters:                    29,955 (33.9%)
Reads written (passing filters):        88,420 (100.0%)

Total basepairs processed:     8,930,420 bp
Quality-trimmed:                  63,969 bp (0.7%)
Total written (filtered):      8,636,479 bp (96.7%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 29955 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 22.2%
  C: 25.8%
  G: 26.3%
  T: 25.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	16306	22105.0	0	16306
2	5057	5526.2	0	5057
3	1377	1381.6	0	1377
4	455	345.4	0	455
5	234	86.3	0	234
6	166	21.6	0	166
7	155	5.4	0	155
8	156	1.3	0	156
9	181	0.3	0	179 2
10	169	0.1	1	159 10
11	153	0.0	1	150 3
12	196	0.0	1	191 5
13	161	0.0	1	158 3
14	166	0.0	1	158 8
15	148	0.0	1	143 5
16	155	0.0	1	148 7
17	142	0.0	1	130 12
18	130	0.0	1	122 8
19	150	0.0	1	145 5
20	140	0.0	1	135 5
21	131	0.0	1	126 5
22	123	0.0	1	119 4
23	145	0.0	1	142 3
24	116	0.0	1	113 3
25	132	0.0	1	129 3
26	111	0.0	1	110 1
27	129	0.0	1	127 2
28	131	0.0	1	126 5
29	117	0.0	1	116 1
30	118	0.0	1	113 5
31	128	0.0	1	124 4
32	117	0.0	1	115 2
33	131	0.0	1	130 1
34	114	0.0	1	110 4
35	112	0.0	1	110 2
36	101	0.0	1	100 1
37	86	0.0	1	83 3
38	123	0.0	1	121 2
39	94	0.0	1	93 1
40	97	0.0	1	94 3
41	64	0.0	1	62 2
42	97	0.0	1	94 3
43	76	0.0	1	75 1
44	90	0.0	1	87 3
45	89	0.0	1	87 2
46	87	0.0	1	82 5
47	146	0.0	1	143 3
48	35	0.0	1	33 2
49	79	0.0	1	78 1
50	43	0.0	1	40 3
51	51	0.0	1	51
52	56	0.0	1	53 3
53	65	0.0	1	64 1
54	82	0.0	1	82
55	37	0.0	1	32 5
56	49	0.0	1	48 1
57	172	0.0	1	167 5
58	38	0.0	1	35 3
59	22	0.0	1	20 2
60	106	0.0	1	100 6
61	19	0.0	1	19
62	26	0.0	1	15 11
63	111	0.0	1	109 2
64	35	0.0	1	35
65	8	0.0	1	8
66	15	0.0	1	14 1
67	13	0.0	1	13
68	9	0.0	1	8 1
69	10	0.0	1	10
70	21	0.0	1	19 2
71	10	0.0	1	9 1
72	3	0.0	1	2 1
73	5	0.0	1	4 1
74	2	0.0	1	2
76	1	0.0	1	1
77	6	0.0	1	0 6
80	1	0.0	1	1
81	1	0.0	1	0 1
82	8	0.0	1	0 8
83	1	0.0	1	0 1
84	4	0.0	1	4
85	4	0.0	1	1 3
90	1	0.0	1	1
95	3	0.0	1	0 3
100	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00261/host_removal/MA-MGH-00261_R2.fastq.gz
=============================================
88420 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files MA-MGH-00261_R1_trimmed.fq.gz and MA-MGH-00261_R2_trimmed.fq.gz
file_1: MA-MGH-00261_R1_trimmed.fq.gz, file_2: MA-MGH-00261_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: MA-MGH-00261_R1_trimmed.fq.gz and MA-MGH-00261_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to MA-MGH-00261_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to MA-MGH-00261_R2_val_2.fq.gz

Total number of sequences analysed: 88420

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 260 (0.29%)


  >>> Now running FastQC on the validated data MA-MGH-00261_R1_val_1.fq.gz<<<

Started analysis of MA-MGH-00261_R1_val_1.fq.gz
Approx 5% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 10% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 15% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 20% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 25% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 30% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 35% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 40% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 45% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 50% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 55% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 60% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 65% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 70% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 75% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 80% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 85% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 90% complete for MA-MGH-00261_R1_val_1.fq.gz
Approx 95% complete for MA-MGH-00261_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data MA-MGH-00261_R2_val_2.fq.gz<<<

Started analysis of MA-MGH-00261_R2_val_2.fq.gz
Approx 5% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 10% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 15% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 20% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 25% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 30% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 35% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 40% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 45% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 50% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 55% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 60% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 65% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 70% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 75% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 80% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 85% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 90% complete for MA-MGH-00261_R2_val_2.fq.gz
Approx 95% complete for MA-MGH-00261_R2_val_2.fq.gz
Deleting both intermediate output files MA-MGH-00261_R1_trimmed.fq.gz and MA-MGH-00261_R2_trimmed.fq.gz

====================================================================================================

