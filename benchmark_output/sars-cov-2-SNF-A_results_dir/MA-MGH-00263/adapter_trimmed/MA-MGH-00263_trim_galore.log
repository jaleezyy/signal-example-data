Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00263/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> MA-MGH-00263/host_removal/MA-MGH-00263_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	11775	CTGTCTCTTATA	158333	7.44
smallRNA	0	TGGAATTCTCGG	158333	0.00
Illumina	0	AGATCGGAAGAGC	158333	0.00
Using Nextera adapter for trimming (count: 11775). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00263/adapter_trimmed/MA-MGH-00263_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00263/host_removal/MA-MGH-00263_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to MA-MGH-00263_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00263/host_removal/MA-MGH-00263_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00263/host_removal/MA-MGH-00263_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.461 s (9.230 µs/read; 6.50 M reads/minute).

=== Summary ===

Total reads processed:                 158,333
Reads with adapters:                    55,955 (35.3%)
Reads written (passing filters):       158,333 (100.0%)

Total basepairs processed:    15,991,633 bp
Quality-trimmed:                 311,120 bp (1.9%)
Total written (filtered):     15,160,530 bp (94.8%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 55955 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 18.1%
  C: 30.4%
  G: 28.9%
  T: 22.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	30110	39583.2	0	30110
2	8198	9895.8	0	8198
3	2471	2474.0	0	2471
4	750	618.5	0	750
5	437	154.6	0	437
6	310	38.7	0	310
7	319	9.7	0	319
8	280	2.4	0	280
9	329	0.6	0	329
10	355	0.2	1	341 14
11	306	0.0	1	302 4
12	324	0.0	1	315 9
13	308	0.0	1	302 6
14	272	0.0	1	259 13
15	277	0.0	1	271 6
16	280	0.0	1	273 7
17	259	0.0	1	252 7
18	281	0.0	1	275 6
19	261	0.0	1	254 7
20	312	0.0	1	302 10
21	282	0.0	1	269 13
22	256	0.0	1	254 2
23	297	0.0	1	289 8
24	209	0.0	1	205 4
25	248	0.0	1	240 8
26	218	0.0	1	213 5
27	222	0.0	1	217 5
28	239	0.0	1	229 10
29	305	0.0	1	295 10
30	235	0.0	1	234 1
31	255	0.0	1	249 6
32	212	0.0	1	207 5
33	222	0.0	1	216 6
34	249	0.0	1	241 8
35	182	0.0	1	179 3
36	191	0.0	1	180 11
37	152	0.0	1	148 4
38	197	0.0	1	192 5
39	175	0.0	1	172 3
40	207	0.0	1	202 5
41	209	0.0	1	203 6
42	189	0.0	1	185 4
43	237	0.0	1	225 12
44	178	0.0	1	172 6
45	369	0.0	1	355 14
46	83	0.0	1	80 3
47	130	0.0	1	125 5
48	583	0.0	1	579 4
49	170	0.0	1	165 5
50	57	0.0	1	51 6
51	341	0.0	1	339 2
52	146	0.0	1	143 3
53	81	0.0	1	79 2
54	254	0.0	1	249 5
55	369	0.0	1	365 4
56	82	0.0	1	81 1
57	69	0.0	1	67 2
58	29	0.0	1	28 1
59	156	0.0	1	153 3
60	23	0.0	1	21 2
61	21	0.0	1	20 1
62	193	0.0	1	190 3
63	41	0.0	1	41
64	16	0.0	1	16
65	71	0.0	1	70 1
66	90	0.0	1	87 3
67	27	0.0	1	25 2
68	92	0.0	1	90 2
69	137	0.0	1	131 6
70	220	0.0	1	214 6
71	29	0.0	1	27 2
72	8	0.0	1	7 1
73	45	0.0	1	45
74	73	0.0	1	73
75	13	0.0	1	13
76	4	0.0	1	4
77	8	0.0	1	7 1
78	8	0.0	1	8
79	6	0.0	1	6
80	17	0.0	1	16 1
81	8	0.0	1	8
82	10	0.0	1	9 1
83	13	0.0	1	12 1
84	15	0.0	1	15
85	8	0.0	1	8
86	15	0.0	1	15
87	5	0.0	1	3 2
88	2	0.0	1	2
89	1	0.0	1	1
90	2	0.0	1	1 1
91	5	0.0	1	5
92	4	0.0	1	4
95	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00263/host_removal/MA-MGH-00263_R1.fastq.gz
=============================================
158333 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00263/adapter_trimmed/MA-MGH-00263_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00263/host_removal/MA-MGH-00263_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to MA-MGH-00263_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00263/host_removal/MA-MGH-00263_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00263/host_removal/MA-MGH-00263_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.718 s (10.847 µs/read; 5.53 M reads/minute).

=== Summary ===

Total reads processed:                 158,333
Reads with adapters:                    56,786 (35.9%)
Reads written (passing filters):       158,333 (100.0%)

Total basepairs processed:    15,991,633 bp
Quality-trimmed:                 289,514 bp (1.8%)
Total written (filtered):     15,190,941 bp (95.0%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 56786 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 18.1%
  C: 30.1%
  G: 29.1%
  T: 22.7%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	30770	39583.2	0	30770
2	8460	9895.8	0	8460
3	2503	2474.0	0	2503
4	797	618.5	0	797
5	439	154.6	0	439
6	310	38.7	0	310
7	336	9.7	0	336
8	270	2.4	0	270
9	336	0.6	0	336
10	353	0.2	1	331 22
11	307	0.0	1	299 8
12	324	0.0	1	318 6
13	309	0.0	1	299 10
14	266	0.0	1	254 12
15	277	0.0	1	270 7
16	259	0.0	1	253 6
17	275	0.0	1	272 3
18	278	0.0	1	268 10
19	269	0.0	1	261 8
20	293	0.0	1	286 7
21	265	0.0	1	256 9
22	276	0.0	1	269 7
23	275	0.0	1	268 7
24	226	0.0	1	218 8
25	239	0.0	1	233 6
26	209	0.0	1	201 8
27	225	0.0	1	220 5
28	252	0.0	1	240 12
29	269	0.0	1	260 9
30	250	0.0	1	244 6
31	242	0.0	1	236 6
32	220	0.0	1	215 5
33	228	0.0	1	219 9
34	237	0.0	1	231 6
35	183	0.0	1	180 3
36	190	0.0	1	184 6
37	160	0.0	1	154 6
38	203	0.0	1	198 5
39	161	0.0	1	155 6
40	215	0.0	1	206 9
41	222	0.0	1	219 3
42	221	0.0	1	214 7
43	208	0.0	1	198 10
44	535	0.0	1	527 8
45	311	0.0	1	303 8
46	95	0.0	1	89 6
47	324	0.0	1	319 5
48	91	0.0	1	88 3
49	110	0.0	1	108 2
50	81	0.0	1	79 2
51	68	0.0	1	67 1
52	84	0.0	1	83 1
53	151	0.0	1	148 3
54	181	0.0	1	180 1
55	63	0.0	1	60 3
56	132	0.0	1	130 2
57	296	0.0	1	290 6
58	121	0.0	1	117 4
59	91	0.0	1	89 2
60	214	0.0	1	208 6
61	125	0.0	1	119 6
62	85	0.0	1	82 3
63	211	0.0	1	206 5
64	228	0.0	1	224 4
65	79	0.0	1	77 2
66	93	0.0	1	87 6
67	88	0.0	1	83 5
68	40	0.0	1	39 1
69	52	0.0	1	47 5
70	40	0.0	1	35 5
71	32	0.0	1	30 2
72	22	0.0	1	21 1
73	35	0.0	1	35
74	18	0.0	1	17 1
75	2	0.0	1	2
76	3	0.0	1	3
77	2	0.0	1	2
78	1	0.0	1	0 1
79	2	0.0	1	2
80	9	0.0	1	9
81	5	0.0	1	5
82	7	0.0	1	7
83	5	0.0	1	4 1
84	12	0.0	1	12
85	7	0.0	1	7
86	11	0.0	1	11
87	3	0.0	1	3
88	2	0.0	1	2
89	1	0.0	1	1
91	6	0.0	1	6
92	4	0.0	1	4
97	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00263/host_removal/MA-MGH-00263_R2.fastq.gz
=============================================
158333 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files MA-MGH-00263_R1_trimmed.fq.gz and MA-MGH-00263_R2_trimmed.fq.gz
file_1: MA-MGH-00263_R1_trimmed.fq.gz, file_2: MA-MGH-00263_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: MA-MGH-00263_R1_trimmed.fq.gz and MA-MGH-00263_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to MA-MGH-00263_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to MA-MGH-00263_R2_val_2.fq.gz

Total number of sequences analysed: 158333

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 993 (0.63%)


  >>> Now running FastQC on the validated data MA-MGH-00263_R1_val_1.fq.gz<<<

Started analysis of MA-MGH-00263_R1_val_1.fq.gz
Approx 5% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 10% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 15% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 20% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 25% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 30% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 35% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 40% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 45% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 50% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 55% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 60% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 65% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 70% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 75% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 80% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 85% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 90% complete for MA-MGH-00263_R1_val_1.fq.gz
Approx 95% complete for MA-MGH-00263_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data MA-MGH-00263_R2_val_2.fq.gz<<<

Started analysis of MA-MGH-00263_R2_val_2.fq.gz
Approx 5% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 10% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 15% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 20% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 25% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 30% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 35% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 40% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 45% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 50% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 55% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 60% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 65% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 70% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 75% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 80% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 85% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 90% complete for MA-MGH-00263_R2_val_2.fq.gz
Approx 95% complete for MA-MGH-00263_R2_val_2.fq.gz
Deleting both intermediate output files MA-MGH-00263_R1_trimmed.fq.gz and MA-MGH-00263_R2_trimmed.fq.gz

====================================================================================================

