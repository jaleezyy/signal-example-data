Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00304/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> MA-MGH-00304/host_removal/MA-MGH-00304_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	35844	CTGTCTCTTATA	1000000	3.58
smallRNA	0	TGGAATTCTCGG	1000000	0.00
Illumina	0	AGATCGGAAGAGC	1000000	0.00
Using Nextera adapter for trimming (count: 35844). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00304/adapter_trimmed/MA-MGH-00304_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00304/host_removal/MA-MGH-00304_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to MA-MGH-00304_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00304/host_removal/MA-MGH-00304_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00304/host_removal/MA-MGH-00304_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 12.938 s (11.548 µs/read; 5.20 M reads/minute).

=== Summary ===

Total reads processed:               1,120,427
Reads with adapters:                   339,649 (30.3%)
Reads written (passing filters):     1,120,427 (100.0%)

Total basepairs processed:   113,163,127 bp
Quality-trimmed:               1,860,341 bp (1.6%)
Total written (filtered):    109,244,032 bp (96.5%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 339649 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 23.0%
  C: 24.8%
  G: 25.8%
  T: 26.4%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	209911	280106.8	0	209911
2	59211	70026.7	0	59211
3	16293	17506.7	0	16293
4	4920	4376.7	0	4920
5	2052	1094.2	0	2052
6	998	273.5	0	998
7	996	68.4	0	996
8	978	17.1	0	978
9	892	4.3	0	887 5
10	1036	1.1	1	937 99
11	846	0.3	1	822 24
12	979	0.1	1	931 48
13	875	0.1	1	850 25
14	850	0.1	1	813 37
15	830	0.1	1	804 26
16	1007	0.1	1	950 57
17	787	0.1	1	772 15
18	898	0.1	1	863 35
19	778	0.1	1	760 18
20	882	0.1	1	852 30
21	875	0.1	1	840 35
22	814	0.1	1	800 14
23	836	0.1	1	799 37
24	758	0.1	1	736 22
25	820	0.1	1	793 27
26	714	0.1	1	694 20
27	766	0.1	1	749 17
28	745	0.1	1	710 35
29	822	0.1	1	794 28
30	737	0.1	1	723 14
31	805	0.1	1	777 28
32	681	0.1	1	668 13
33	760	0.1	1	733 27
34	715	0.1	1	687 28
35	684	0.1	1	660 24
36	675	0.1	1	662 13
37	688	0.1	1	666 22
38	716	0.1	1	685 31
39	673	0.1	1	664 9
40	670	0.1	1	654 16
41	724	0.1	1	699 25
42	689	0.1	1	671 18
43	707	0.1	1	678 29
44	669	0.1	1	651 18
45	1156	0.1	1	1139 17
46	224	0.1	1	210 14
47	542	0.1	1	530 12
48	719	0.1	1	703 16
49	572	0.1	1	560 12
50	596	0.1	1	569 27
51	686	0.1	1	657 29
52	697	0.1	1	682 15
53	646	0.1	1	630 16
54	679	0.1	1	663 16
55	562	0.1	1	552 10
56	549	0.1	1	540 9
57	566	0.1	1	560 6
58	623	0.1	1	605 18
59	550	0.1	1	536 14
60	613	0.1	1	603 10
61	603	0.1	1	594 9
62	780	0.1	1	772 8
63	760	0.1	1	756 4
64	645	0.1	1	633 12
65	491	0.1	1	484 7
66	436	0.1	1	427 9
67	381	0.1	1	379 2
68	475	0.1	1	473 2
69	443	0.1	1	436 7
70	530	0.1	1	525 5
71	25	0.1	1	24 1
72	48	0.1	1	47 1
73	152	0.1	1	149 3
74	93	0.1	1	92 1
75	20	0.1	1	19 1
76	3	0.1	1	3
77	3	0.1	1	2 1
78	4	0.1	1	4
80	3	0.1	1	1 2
81	3	0.1	1	3
82	1	0.1	1	1
84	4	0.1	1	3 1
86	1	0.1	1	1
87	2	0.1	1	2
89	1	0.1	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00304/host_removal/MA-MGH-00304_R1.fastq.gz
=============================================
1120427 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00304/adapter_trimmed/MA-MGH-00304_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00304/host_removal/MA-MGH-00304_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to MA-MGH-00304_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00304/host_removal/MA-MGH-00304_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00304/host_removal/MA-MGH-00304_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 14.338 s (12.797 µs/read; 4.69 M reads/minute).

=== Summary ===

Total reads processed:               1,120,427
Reads with adapters:                   345,751 (30.9%)
Reads written (passing filters):     1,120,427 (100.0%)

Total basepairs processed:   113,163,127 bp
Quality-trimmed:               1,522,903 bp (1.3%)
Total written (filtered):    109,623,941 bp (96.9%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 345751 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 23.2%
  C: 25.1%
  G: 25.6%
  T: 26.1%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	214477	280106.8	0	214477
2	61464	70026.7	0	61464
3	16170	17506.7	0	16170
4	4967	4376.7	0	4967
5	1932	1094.2	0	1932
6	995	273.5	0	995
7	1000	68.4	0	1000
8	929	17.1	0	929
9	878	4.3	0	872 6
10	1054	1.1	1	909 145
11	847	0.3	1	814 33
12	963	0.1	1	919 44
13	865	0.1	1	838 27
14	829	0.1	1	791 38
15	814	0.1	1	786 28
16	908	0.1	1	862 46
17	813	0.1	1	781 32
18	906	0.1	1	868 38
19	821	0.1	1	787 34
20	820	0.1	1	796 24
21	837	0.1	1	794 43
22	871	0.1	1	838 33
23	785	0.1	1	755 30
24	788	0.1	1	756 32
25	798	0.1	1	774 24
26	679	0.1	1	664 15
27	764	0.1	1	737 27
28	738	0.1	1	718 20
29	747	0.1	1	731 16
30	778	0.1	1	752 26
31	764	0.1	1	739 25
32	699	0.1	1	676 23
33	749	0.1	1	721 28
34	691	0.1	1	673 18
35	688	0.1	1	652 36
36	704	0.1	1	680 24
37	672	0.1	1	653 19
38	699	0.1	1	673 26
39	679	0.1	1	666 13
40	724	0.1	1	700 24
41	702	0.1	1	674 28
42	754	0.1	1	721 33
43	665	0.1	1	645 20
44	2382	0.1	1	2336 46
45	960	0.1	1	934 26
46	627	0.1	1	592 35
47	701	0.1	1	690 11
48	236	0.1	1	220 16
49	683	0.1	1	666 17
50	137	0.1	1	130 7
51	259	0.1	1	247 12
52	200	0.1	1	189 11
53	605	0.1	1	593 12
54	967	0.1	1	950 17
55	229	0.1	1	220 9
56	595	0.1	1	579 16
57	1808	0.1	1	1788 20
58	390	0.1	1	381 9
59	238	0.1	1	236 2
60	1377	0.1	1	1361 16
61	335	0.1	1	326 9
62	226	0.1	1	220 6
63	1131	0.1	1	1123 8
64	1081	0.1	1	1061 20
65	156	0.1	1	150 6
66	203	0.1	1	202 1
67	92	0.1	1	91 1
68	102	0.1	1	98 4
69	95	0.1	1	93 2
70	196	0.1	1	195 1
71	88	0.1	1	85 3
72	80	0.1	1	79 1
73	80	0.1	1	75 5
74	40	0.1	1	39 1
75	6	0.1	1	6
76	3	0.1	1	2 1
77	3	0.1	1	2 1
78	2	0.1	1	2
80	1	0.1	1	1
81	2	0.1	1	2
82	1	0.1	1	1
83	2	0.1	1	1 1
87	2	0.1	1	1 1
91	1	0.1	1	0 1
92	1	0.1	1	1
98	1	0.1	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00304/host_removal/MA-MGH-00304_R2.fastq.gz
=============================================
1120427 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files MA-MGH-00304_R1_trimmed.fq.gz and MA-MGH-00304_R2_trimmed.fq.gz
file_1: MA-MGH-00304_R1_trimmed.fq.gz, file_2: MA-MGH-00304_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: MA-MGH-00304_R1_trimmed.fq.gz and MA-MGH-00304_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to MA-MGH-00304_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to MA-MGH-00304_R2_val_2.fq.gz

Total number of sequences analysed: 1120427

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 4974 (0.44%)


  >>> Now running FastQC on the validated data MA-MGH-00304_R1_val_1.fq.gz<<<

Started analysis of MA-MGH-00304_R1_val_1.fq.gz
Approx 5% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 10% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 15% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 20% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 25% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 30% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 35% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 40% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 45% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 50% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 55% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 60% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 65% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 70% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 75% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 80% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 85% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 90% complete for MA-MGH-00304_R1_val_1.fq.gz
Approx 95% complete for MA-MGH-00304_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data MA-MGH-00304_R2_val_2.fq.gz<<<

Started analysis of MA-MGH-00304_R2_val_2.fq.gz
Approx 5% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 10% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 15% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 20% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 25% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 30% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 35% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 40% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 45% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 50% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 55% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 60% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 65% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 70% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 75% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 80% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 85% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 90% complete for MA-MGH-00304_R2_val_2.fq.gz
Approx 95% complete for MA-MGH-00304_R2_val_2.fq.gz
Deleting both intermediate output files MA-MGH-00304_R1_trimmed.fq.gz and MA-MGH-00304_R2_trimmed.fq.gz

====================================================================================================

