Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00303/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> MA-MGH-00303/host_removal/MA-MGH-00303_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	52553	CTGTCTCTTATA	665270	7.90
Illumina	0	AGATCGGAAGAGC	665270	0.00
smallRNA	0	TGGAATTCTCGG	665270	0.00
Using Nextera adapter for trimming (count: 52553). Second best hit was Illumina (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00303/adapter_trimmed/MA-MGH-00303_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00303/host_removal/MA-MGH-00303_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to MA-MGH-00303_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00303/host_removal/MA-MGH-00303_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00303/host_removal/MA-MGH-00303_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 8.608 s (12.940 µs/read; 4.64 M reads/minute).

=== Summary ===

Total reads processed:                 665,270
Reads with adapters:                   242,535 (36.5%)
Reads written (passing filters):       665,270 (100.0%)

Total basepairs processed:    67,192,270 bp
Quality-trimmed:               1,146,194 bp (1.7%)
Total written (filtered):     63,701,065 bp (94.8%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 242535 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 20.5%
  C: 28.0%
  G: 28.1%
  T: 23.3%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	128649	166317.5	0	128649
2	34703	41579.4	0	34703
3	11398	10394.8	0	11398
4	3910	2598.7	0	3910
5	2080	649.7	0	2080
6	1253	162.4	0	1253
7	1295	40.6	0	1295
8	1250	10.2	0	1250
9	1198	2.5	0	1197 1
10	1350	0.6	1	1266 84
11	1211	0.2	1	1162 49
12	1279	0.0	1	1218 61
13	1289	0.0	1	1245 44
14	1220	0.0	1	1168 52
15	1239	0.0	1	1200 39
16	1317	0.0	1	1232 85
17	1110	0.0	1	1075 35
18	1210	0.0	1	1170 40
19	1075	0.0	1	1037 38
20	1209	0.0	1	1154 55
21	1091	0.0	1	1060 31
22	1106	0.0	1	1074 32
23	1179	0.0	1	1117 62
24	1013	0.0	1	988 25
25	1144	0.0	1	1102 42
26	1017	0.0	1	989 28
27	1111	0.0	1	1080 31
28	1065	0.0	1	1034 31
29	1195	0.0	1	1143 52
30	1019	0.0	1	980 39
31	1082	0.0	1	1037 45
32	910	0.0	1	891 19
33	1038	0.0	1	1002 36
34	1054	0.0	1	1005 49
35	928	0.0	1	906 22
36	921	0.0	1	884 37
37	947	0.0	1	911 36
38	950	0.0	1	914 36
39	971	0.0	1	946 25
40	942	0.0	1	914 28
41	851	0.0	1	822 29
42	909	0.0	1	877 32
43	953	0.0	1	914 39
44	817	0.0	1	792 25
45	1562	0.0	1	1520 42
46	304	0.0	1	293 11
47	541	0.0	1	529 12
48	816	0.0	1	793 23
49	945	0.0	1	923 22
50	875	0.0	1	848 27
51	1045	0.0	1	1016 29
52	887	0.0	1	866 21
53	807	0.0	1	795 12
54	806	0.0	1	783 23
55	775	0.0	1	756 19
56	693	0.0	1	682 11
57	742	0.0	1	721 21
58	831	0.0	1	817 14
59	731	0.0	1	716 15
60	651	0.0	1	640 11
61	534	0.0	1	526 8
62	1047	0.0	1	1027 20
63	818	0.0	1	807 11
64	725	0.0	1	718 7
65	434	0.0	1	432 2
66	544	0.0	1	536 8
67	347	0.0	1	339 8
68	494	0.0	1	483 11
69	416	0.0	1	410 6
70	344	0.0	1	333 11
71	39	0.0	1	37 2
72	55	0.0	1	55
73	133	0.0	1	132 1
74	88	0.0	1	87 1
75	20	0.0	1	19 1
76	4	0.0	1	4
77	3	0.0	1	3
78	6	0.0	1	4 2
79	1	0.0	1	1
80	2	0.0	1	1 1
81	2	0.0	1	2
82	1	0.0	1	1
83	3	0.0	1	2 1
84	3	0.0	1	3
85	1	0.0	1	1
86	1	0.0	1	1
90	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00303/host_removal/MA-MGH-00303_R1.fastq.gz
=============================================
665270 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-SNF-A_results_dir/MA-MGH-00303/adapter_trimmed/MA-MGH-00303_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: MA-MGH-00303/host_removal/MA-MGH-00303_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to MA-MGH-00303_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file MA-MGH-00303/host_removal/MA-MGH-00303_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA MA-MGH-00303/host_removal/MA-MGH-00303_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 8.785 s (13.205 µs/read; 4.54 M reads/minute).

=== Summary ===

Total reads processed:                 665,270
Reads with adapters:                   246,818 (37.1%)
Reads written (passing filters):       665,270 (100.0%)

Total basepairs processed:    67,192,270 bp
Quality-trimmed:                 894,474 bp (1.3%)
Total written (filtered):     63,972,690 bp (95.2%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 246818 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 20.9%
  C: 28.1%
  G: 28.1%
  T: 23.0%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	132027	166317.5	0	132027
2	35254	41579.4	0	35254
3	11321	10394.8	0	11321
4	3888	2598.7	0	3888
5	2116	649.7	0	2116
6	1309	162.4	0	1309
7	1313	40.6	0	1313
8	1275	10.2	0	1275
9	1232	2.5	0	1228 4
10	1378	0.6	1	1310 68
11	1233	0.2	1	1208 25
12	1269	0.0	1	1232 37
13	1318	0.0	1	1284 34
14	1214	0.0	1	1189 25
15	1259	0.0	1	1236 23
16	1196	0.0	1	1161 35
17	1217	0.0	1	1195 22
18	1211	0.0	1	1179 32
19	1155	0.0	1	1128 27
20	1191	0.0	1	1166 25
21	1063	0.0	1	1036 27
22	1179	0.0	1	1137 42
23	1131	0.0	1	1105 26
24	1053	0.0	1	1031 22
25	1144	0.0	1	1116 28
26	1000	0.0	1	983 17
27	1119	0.0	1	1102 17
28	1095	0.0	1	1067 28
29	1111	0.0	1	1096 15
30	1060	0.0	1	1039 21
31	1019	0.0	1	997 22
32	1002	0.0	1	991 11
33	1032	0.0	1	1020 12
34	1047	0.0	1	1021 26
35	1021	0.0	1	1007 14
36	872	0.0	1	849 23
37	927	0.0	1	918 9
38	1014	0.0	1	995 19
39	849	0.0	1	830 19
40	949	0.0	1	936 13
41	931	0.0	1	910 21
42	990	0.0	1	969 21
43	850	0.0	1	832 18
44	2619	0.0	1	2584 35
45	1301	0.0	1	1286 15
46	847	0.0	1	826 21
47	1074	0.0	1	1063 11
48	303	0.0	1	289 14
49	1059	0.0	1	1045 14
50	248	0.0	1	241 7
51	407	0.0	1	404 3
52	335	0.0	1	331 4
53	787	0.0	1	774 13
54	1216	0.0	1	1197 19
55	301	0.0	1	296 5
56	768	0.0	1	756 12
57	2307	0.0	1	2286 21
58	484	0.0	1	475 9
59	283	0.0	1	275 8
60	1528	0.0	1	1516 12
61	379	0.0	1	376 3
62	258	0.0	1	256 2
63	1290	0.0	1	1286 4
64	1005	0.0	1	995 10
65	152	0.0	1	146 6
66	228	0.0	1	224 4
67	96	0.0	1	94 2
68	110	0.0	1	110
69	111	0.0	1	110 1
70	171	0.0	1	171
71	89	0.0	1	85 4
72	76	0.0	1	74 2
73	90	0.0	1	89 1
74	30	0.0	1	29 1
75	6	0.0	1	5 1
76	3	0.0	1	3
77	2	0.0	1	2
78	3	0.0	1	1 2
79	1	0.0	1	1
81	2	0.0	1	1 1
83	3	0.0	1	1 2
84	4	0.0	1	3 1
85	1	0.0	1	0 1
87	1	0.0	1	1
88	1	0.0	1	1
89	1	0.0	1	1
92	2	0.0	1	1 1
97	1	0.0	1	0 1
98	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: MA-MGH-00303/host_removal/MA-MGH-00303_R2.fastq.gz
=============================================
665270 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files MA-MGH-00303_R1_trimmed.fq.gz and MA-MGH-00303_R2_trimmed.fq.gz
file_1: MA-MGH-00303_R1_trimmed.fq.gz, file_2: MA-MGH-00303_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: MA-MGH-00303_R1_trimmed.fq.gz and MA-MGH-00303_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to MA-MGH-00303_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to MA-MGH-00303_R2_val_2.fq.gz

Total number of sequences analysed: 665270

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 3247 (0.49%)


  >>> Now running FastQC on the validated data MA-MGH-00303_R1_val_1.fq.gz<<<

Started analysis of MA-MGH-00303_R1_val_1.fq.gz
Approx 5% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 10% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 15% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 20% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 25% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 30% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 35% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 40% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 45% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 50% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 55% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 60% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 65% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 70% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 75% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 80% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 85% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 90% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 95% complete for MA-MGH-00303_R1_val_1.fq.gz
Approx 100% complete for MA-MGH-00303_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data MA-MGH-00303_R2_val_2.fq.gz<<<

Started analysis of MA-MGH-00303_R2_val_2.fq.gz
Approx 5% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 10% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 15% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 20% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 25% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 30% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 35% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 40% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 45% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 50% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 55% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 60% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 65% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 70% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 75% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 80% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 85% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 90% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 95% complete for MA-MGH-00303_R2_val_2.fq.gz
Approx 100% complete for MA-MGH-00303_R2_val_2.fq.gz
Deleting both intermediate output files MA-MGH-00303_R1_trimmed.fq.gz and MA-MGH-00303_R2_trimmed.fq.gz

====================================================================================================

