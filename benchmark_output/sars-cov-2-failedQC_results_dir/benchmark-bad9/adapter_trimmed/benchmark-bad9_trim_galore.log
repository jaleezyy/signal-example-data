Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad9/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad9/host_removal/benchmark-bad9_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	9	CTGTCTCTTATA	112340	0.01
smallRNA	0	TGGAATTCTCGG	112340	0.00
Illumina	0	AGATCGGAAGAGC	112340	0.00
Using Nextera adapter for trimming (count: 9). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad9/adapter_trimmed/benchmark-bad9_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad9/host_removal/benchmark-bad9_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad9_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad9/host_removal/benchmark-bad9_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad9/host_removal/benchmark-bad9_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.959 s (8.538 µs/read; 7.03 M reads/minute).

=== Summary ===

Total reads processed:                 112,340
Reads with adapters:                    37,193 (33.1%)
Reads written (passing filters):       112,340 (100.0%)

Total basepairs processed:    12,601,297 bp
Quality-trimmed:                  21,315 bp (0.2%)
Total written (filtered):     12,532,630 bp (99.5%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 37193 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 47.3%
  C: 17.3%
  G: 17.7%
  T: 17.7%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	32502	28085.0	0	32502
2	3245	7021.2	0	3245
3	1109	1755.3	0	1109
4	241	438.8	0	241
5	30	109.7	0	30
7	1	6.9	0	1
13	3	0.0	1	1 2
14	1	0.0	1	1
17	1	0.0	1	0 1
19	2	0.0	1	1 1
21	1	0.0	1	0 1
28	2	0.0	1	0 2
29	2	0.0	1	0 2
30	1	0.0	1	1
31	1	0.0	1	0 1
33	2	0.0	1	0 2
34	1	0.0	1	0 1
35	1	0.0	1	0 1
41	1	0.0	1	0 1
42	1	0.0	1	0 1
45	2	0.0	1	0 2
46	2	0.0	1	0 2
50	1	0.0	1	0 1
51	1	0.0	1	0 1
52	2	0.0	1	1 1
53	1	0.0	1	0 1
55	1	0.0	1	0 1
57	1	0.0	1	0 1
58	4	0.0	1	0 4
61	2	0.0	1	0 2
63	2	0.0	1	0 2
69	1	0.0	1	0 1
74	1	0.0	1	0 1
76	2	0.0	1	0 2
77	1	0.0	1	0 1
78	1	0.0	1	0 1
79	1	0.0	1	0 1
81	1	0.0	1	1
83	1	0.0	1	0 1
84	1	0.0	1	0 1
85	1	0.0	1	0 1
86	1	0.0	1	0 1
87	1	0.0	1	1
88	1	0.0	1	0 1
93	1	0.0	1	0 1
94	2	0.0	1	0 2
95	2	0.0	1	0 2
96	1	0.0	1	0 1
102	1	0.0	1	0 1
104	1	0.0	1	1
110	1	0.0	1	0 1
112	1	0.0	1	1
117	1	0.0	1	0 1
123	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad9/host_removal/benchmark-bad9_R1.fastq.gz
=============================================
112340 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad9/adapter_trimmed/benchmark-bad9_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad9/host_removal/benchmark-bad9_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad9_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad9/host_removal/benchmark-bad9_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad9/host_removal/benchmark-bad9_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.009 s (8.983 µs/read; 6.68 M reads/minute).

=== Summary ===

Total reads processed:                 112,340
Reads with adapters:                    36,391 (32.4%)
Reads written (passing filters):       112,340 (100.0%)

Total basepairs processed:    12,632,007 bp
Quality-trimmed:                  64,649 bp (0.5%)
Total written (filtered):     12,514,618 bp (99.1%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 36391 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 47.4%
  C: 17.3%
  G: 17.5%
  T: 17.7%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	31506	28085.0	0	31506
2	3286	7021.2	0	3286
3	1142	1755.3	0	1142
4	257	438.8	0	257
5	33	109.7	0	33
6	6	27.4	0	6
7	1	6.9	0	1
8	4	1.7	0	4
9	2	0.4	0	2
10	2	0.1	1	1 1
11	5	0.0	1	1 4
12	1	0.0	1	1
13	7	0.0	1	2 5
15	3	0.0	1	1 2
16	5	0.0	1	0 5
17	3	0.0	1	1 2
18	1	0.0	1	0 1
20	2	0.0	1	0 2
21	1	0.0	1	0 1
23	3	0.0	1	2 1
24	1	0.0	1	0 1
26	2	0.0	1	0 2
28	1	0.0	1	0 1
29	2	0.0	1	1 1
30	1	0.0	1	0 1
32	1	0.0	1	0 1
33	1	0.0	1	0 1
34	2	0.0	1	0 2
35	1	0.0	1	1
36	1	0.0	1	0 1
37	4	0.0	1	0 4
38	4	0.0	1	0 4
39	1	0.0	1	0 1
40	3	0.0	1	0 3
41	1	0.0	1	0 1
42	1	0.0	1	0 1
44	1	0.0	1	0 1
46	2	0.0	1	0 2
48	2	0.0	1	0 2
49	4	0.0	1	0 4
50	1	0.0	1	0 1
51	2	0.0	1	1 1
52	1	0.0	1	0 1
55	1	0.0	1	0 1
56	1	0.0	1	0 1
57	1	0.0	1	1
58	1	0.0	1	0 1
63	1	0.0	1	0 1
64	1	0.0	1	0 1
66	2	0.0	1	0 2
69	1	0.0	1	0 1
71	1	0.0	1	1
72	1	0.0	1	1
73	1	0.0	1	0 1
75	2	0.0	1	0 2
76	2	0.0	1	0 2
77	1	0.0	1	0 1
79	1	0.0	1	0 1
83	1	0.0	1	0 1
84	3	0.0	1	1 2
85	1	0.0	1	0 1
86	2	0.0	1	0 2
87	2	0.0	1	1 1
91	2	0.0	1	0 2
92	1	0.0	1	0 1
93	1	0.0	1	0 1
94	1	0.0	1	0 1
96	2	0.0	1	0 2
98	1	0.0	1	0 1
99	2	0.0	1	0 2
100	1	0.0	1	0 1
102	1	0.0	1	0 1
103	2	0.0	1	0 2
104	3	0.0	1	1 2
105	8	0.0	1	1 7
106	1	0.0	1	0 1
107	2	0.0	1	0 2
109	1	0.0	1	0 1
110	1	0.0	1	0 1
111	3	0.0	1	0 3
112	2	0.0	1	1 1
114	1	0.0	1	0 1
116	4	0.0	1	1 3
118	1	0.0	1	1
120	2	0.0	1	0 2
121	5	0.0	1	2 3
122	2	0.0	1	0 2
123	2	0.0	1	0 2
124	2	0.0	1	0 2

RUN STATISTICS FOR INPUT FILE: benchmark-bad9/host_removal/benchmark-bad9_R2.fastq.gz
=============================================
112340 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad9_R1_trimmed.fq.gz and benchmark-bad9_R2_trimmed.fq.gz
file_1: benchmark-bad9_R1_trimmed.fq.gz, file_2: benchmark-bad9_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad9_R1_trimmed.fq.gz and benchmark-bad9_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad9_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad9_R2_val_2.fq.gz

Total number of sequences analysed: 112340

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 253 (0.23%)


  >>> Now running FastQC on the validated data benchmark-bad9_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad9_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad9_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad9_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad9_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad9_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad9_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad9_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad9_R1_trimmed.fq.gz and benchmark-bad9_R2_trimmed.fq.gz

====================================================================================================

