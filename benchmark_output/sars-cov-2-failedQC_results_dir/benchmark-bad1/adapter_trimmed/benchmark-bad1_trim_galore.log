Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad1/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad1/host_removal/benchmark-bad1_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	2	CTGTCTCTTATA	24287	0.01
smallRNA	0	TGGAATTCTCGG	24287	0.00
Illumina	0	AGATCGGAAGAGC	24287	0.00
Using Nextera adapter for trimming (count: 2). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad1/adapter_trimmed/benchmark-bad1_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad1/host_removal/benchmark-bad1_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad1_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad1/host_removal/benchmark-bad1_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad1/host_removal/benchmark-bad1_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.413 s (17.022 µs/read; 3.52 M reads/minute).

=== Summary ===

Total reads processed:                  24,287
Reads with adapters:                     7,546 (31.1%)
Reads written (passing filters):        24,287 (100.0%)

Total basepairs processed:     2,870,415 bp
Quality-trimmed:                   3,868 bp (0.1%)
Total written (filtered):      2,857,100 bp (99.5%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 7546 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 47.3%
  C: 19.9%
  G: 18.5%
  T: 14.3%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	6618	6071.8	0	6618
2	676	1517.9	0	676
3	194	379.5	0	194
4	42	94.9	0	42
5	1	23.7	0	1
6	2	5.9	0	2
9	1	0.1	0	0 1
11	1	0.0	1	0 1
13	1	0.0	1	1
22	1	0.0	1	0 1
42	1	0.0	1	0 1
45	1	0.0	1	0 1
47	1	0.0	1	1
67	2	0.0	1	0 2
82	1	0.0	1	0 1
94	1	0.0	1	0 1
95	1	0.0	1	0 1
116	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad1/host_removal/benchmark-bad1_R1.fastq.gz
=============================================
24287 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad1/adapter_trimmed/benchmark-bad1_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad1/host_removal/benchmark-bad1_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad1_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad1/host_removal/benchmark-bad1_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad1/host_removal/benchmark-bad1_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.410 s (16.862 µs/read; 3.56 M reads/minute).

=== Summary ===

Total reads processed:                  24,287
Reads with adapters:                     7,519 (31.0%)
Reads written (passing filters):        24,287 (100.0%)

Total basepairs processed:     2,875,950 bp
Quality-trimmed:                   9,096 bp (0.3%)
Total written (filtered):      2,856,091 bp (99.3%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 7519 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 46.3%
  C: 20.0%
  G: 19.1%
  T: 14.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	6540	6071.8	0	6540
2	676	1517.9	0	676
3	206	379.5	0	206
4	60	94.9	0	60
5	2	23.7	0	2
6	1	5.9	0	1
12	1	0.0	1	0 1
14	1	0.0	1	0 1
16	1	0.0	1	0 1
17	1	0.0	1	0 1
19	2	0.0	1	1 1
23	2	0.0	1	0 2
25	1	0.0	1	0 1
29	1	0.0	1	0 1
32	2	0.0	1	0 2
33	1	0.0	1	1
39	1	0.0	1	0 1
41	1	0.0	1	0 1
42	1	0.0	1	0 1
45	1	0.0	1	1
46	1	0.0	1	0 1
58	1	0.0	1	0 1
59	1	0.0	1	0 1
63	1	0.0	1	0 1
72	1	0.0	1	1
77	1	0.0	1	0 1
81	1	0.0	1	0 1
93	1	0.0	1	0 1
95	1	0.0	1	0 1
103	1	0.0	1	0 1
107	1	0.0	1	0 1
108	1	0.0	1	1
110	1	0.0	1	0 1
111	1	0.0	1	0 1
115	1	0.0	1	0 1
117	1	0.0	1	0 1
121	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad1/host_removal/benchmark-bad1_R2.fastq.gz
=============================================
24287 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad1_R1_trimmed.fq.gz and benchmark-bad1_R2_trimmed.fq.gz
file_1: benchmark-bad1_R1_trimmed.fq.gz, file_2: benchmark-bad1_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad1_R1_trimmed.fq.gz and benchmark-bad1_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad1_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad1_R2_val_2.fq.gz

Total number of sequences analysed: 24287

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 40 (0.16%)


  >>> Now running FastQC on the validated data benchmark-bad1_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad1_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad1_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad1_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad1_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad1_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad1_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad1_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad1_R1_trimmed.fq.gz and benchmark-bad1_R2_trimmed.fq.gz

====================================================================================================

