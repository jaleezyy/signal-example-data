Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad11/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad11/host_removal/benchmark-bad11_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	16	CTGTCTCTTATA	137886	0.01
Illumina	0	AGATCGGAAGAGC	137886	0.00
smallRNA	0	TGGAATTCTCGG	137886	0.00
Using Nextera adapter for trimming (count: 16). Second best hit was Illumina (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad11/adapter_trimmed/benchmark-bad11_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad11/host_removal/benchmark-bad11_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad11_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad11/host_removal/benchmark-bad11_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad11/host_removal/benchmark-bad11_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 2.190 s (15.885 µs/read; 3.78 M reads/minute).

=== Summary ===

Total reads processed:                 137,886
Reads with adapters:                    39,158 (28.4%)
Reads written (passing filters):       137,886 (100.0%)

Total basepairs processed:    16,373,474 bp
Quality-trimmed:                  25,404 bp (0.2%)
Total written (filtered):     16,296,083 bp (99.5%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 39158 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 45.7%
  C: 16.8%
  G: 18.6%
  T: 18.9%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	33570	34471.5	0	33570
2	3845	8617.9	0	3845
3	1228	2154.5	0	1228
4	319	538.6	0	319
5	67	134.7	0	67
6	28	33.7	0	28
7	3	8.4	0	3
9	2	0.5	0	0 2
11	6	0.0	1	0 6
13	1	0.0	1	0 1
15	6	0.0	1	5 1
16	2	0.0	1	0 2
17	3	0.0	1	0 3
18	1	0.0	1	1
19	1	0.0	1	0 1
20	1	0.0	1	0 1
21	5	0.0	1	1 4
31	2	0.0	1	2
33	2	0.0	1	0 2
36	3	0.0	1	1 2
37	2	0.0	1	1 1
41	1	0.0	1	0 1
42	1	0.0	1	0 1
43	1	0.0	1	0 1
45	2	0.0	1	1 1
46	2	0.0	1	0 2
49	1	0.0	1	0 1
50	1	0.0	1	0 1
51	3	0.0	1	0 3
52	1	0.0	1	0 1
54	1	0.0	1	0 1
55	1	0.0	1	0 1
57	1	0.0	1	0 1
58	4	0.0	1	0 4
61	3	0.0	1	0 3
63	2	0.0	1	0 2
64	1	0.0	1	0 1
67	2	0.0	1	0 2
68	1	0.0	1	0 1
69	1	0.0	1	0 1
71	1	0.0	1	0 1
72	1	0.0	1	0 1
73	1	0.0	1	0 1
74	1	0.0	1	0 1
76	2	0.0	1	1 1
77	2	0.0	1	0 2
78	1	0.0	1	0 1
79	1	0.0	1	0 1
80	1	0.0	1	0 1
82	1	0.0	1	1
83	1	0.0	1	0 1
84	1	0.0	1	1
85	1	0.0	1	0 1
89	1	0.0	1	0 1
93	1	0.0	1	0 1
94	1	0.0	1	0 1
96	1	0.0	1	0 1
99	2	0.0	1	0 2
100	1	0.0	1	0 1
107	1	0.0	1	1
109	1	0.0	1	0 1
110	1	0.0	1	0 1
111	3	0.0	1	0 3
116	1	0.0	1	0 1
117	1	0.0	1	0 1
118	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad11/host_removal/benchmark-bad11_R1.fastq.gz
=============================================
137886 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad11/adapter_trimmed/benchmark-bad11_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad11/host_removal/benchmark-bad11_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad11_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad11/host_removal/benchmark-bad11_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad11/host_removal/benchmark-bad11_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 2.256 s (16.364 µs/read; 3.67 M reads/minute).

=== Summary ===

Total reads processed:                 137,886
Reads with adapters:                    39,666 (28.8%)
Reads written (passing filters):       137,886 (100.0%)

Total basepairs processed:    16,381,211 bp
Quality-trimmed:                  45,575 bp (0.3%)
Total written (filtered):     16,281,226 bp (99.4%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 39666 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 45.6%
  C: 16.6%
  G: 18.8%
  T: 19.0%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	33915	34471.5	0	33915
2	3960	8617.9	0	3960
3	1231	2154.5	0	1231
4	345	538.6	0	345
5	46	134.7	0	46
6	27	33.7	0	27
7	5	8.4	0	5
9	2	0.5	0	2
11	8	0.0	1	1 7
13	2	0.0	1	0 2
15	6	0.0	1	3 3
17	1	0.0	1	0 1
18	2	0.0	1	0 2
19	4	0.0	1	0 4
20	2	0.0	1	0 2
23	1	0.0	1	0 1
24	1	0.0	1	0 1
25	3	0.0	1	1 2
27	2	0.0	1	2
28	2	0.0	1	0 2
30	1	0.0	1	0 1
31	6	0.0	1	1 5
33	1	0.0	1	0 1
35	2	0.0	1	0 2
36	3	0.0	1	1 2
37	3	0.0	1	1 2
38	1	0.0	1	0 1
39	1	0.0	1	0 1
40	3	0.0	1	0 3
41	3	0.0	1	0 3
42	1	0.0	1	1
43	1	0.0	1	1
44	4	0.0	1	1 3
45	4	0.0	1	1 3
46	3	0.0	1	1 2
47	7	0.0	1	2 5
48	1	0.0	1	0 1
50	1	0.0	1	1
51	4	0.0	1	3 1
52	1	0.0	1	0 1
53	2	0.0	1	0 2
54	1	0.0	1	0 1
57	1	0.0	1	0 1
58	3	0.0	1	0 3
60	1	0.0	1	0 1
61	1	0.0	1	0 1
63	1	0.0	1	0 1
68	1	0.0	1	1
72	1	0.0	1	0 1
74	1	0.0	1	1
77	1	0.0	1	0 1
78	1	0.0	1	0 1
80	3	0.0	1	1 2
81	1	0.0	1	0 1
82	4	0.0	1	1 3
83	3	0.0	1	0 3
84	2	0.0	1	0 2
86	1	0.0	1	0 1
87	1	0.0	1	0 1
88	1	0.0	1	0 1
89	1	0.0	1	0 1
91	1	0.0	1	0 1
99	1	0.0	1	0 1
100	1	0.0	1	0 1
101	1	0.0	1	0 1
102	2	0.0	1	0 2
109	1	0.0	1	0 1
111	1	0.0	1	0 1
112	2	0.0	1	0 2
114	2	0.0	1	0 2
115	1	0.0	1	0 1
116	2	0.0	1	0 2
117	1	0.0	1	0 1
119	1	0.0	1	0 1
122	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad11/host_removal/benchmark-bad11_R2.fastq.gz
=============================================
137886 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad11_R1_trimmed.fq.gz and benchmark-bad11_R2_trimmed.fq.gz
file_1: benchmark-bad11_R1_trimmed.fq.gz, file_2: benchmark-bad11_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad11_R1_trimmed.fq.gz and benchmark-bad11_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad11_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad11_R2_val_2.fq.gz

Total number of sequences analysed: 137886

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 141 (0.10%)


  >>> Now running FastQC on the validated data benchmark-bad11_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad11_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad11_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad11_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad11_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad11_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad11_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad11_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad11_R1_trimmed.fq.gz and benchmark-bad11_R2_trimmed.fq.gz

====================================================================================================

