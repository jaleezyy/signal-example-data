Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad8/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad8/host_removal/benchmark-bad8_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	1	CTGTCTCTTATA	2737	0.04
smallRNA	0	TGGAATTCTCGG	2737	0.00
Illumina	0	AGATCGGAAGAGC	2737	0.00
Using Nextera adapter for trimming (count: 1). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad8/adapter_trimmed/benchmark-bad8_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad8/host_removal/benchmark-bad8_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad8_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad8/host_removal/benchmark-bad8_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad8/host_removal/benchmark-bad8_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.063 s (23.074 µs/read; 2.60 M reads/minute).

=== Summary ===

Total reads processed:                   2,737
Reads with adapters:                     1,119 (40.9%)
Reads written (passing filters):         2,737 (100.0%)

Total basepairs processed:       109,614 bp
Quality-trimmed:                  20,226 bp (18.5%)
Total written (filtered):         87,517 bp (79.8%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 1119 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 36.3%
  C: 13.0%
  G: 25.3%
  T: 25.4%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	895	684.2	0	895
2	167	171.1	0	167
3	44	42.8	0	44
4	8	10.7	0	8
7	1	0.2	0	1
103	1	0.0	1	0 1
121	2	0.0	1	1 1
126	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad8/host_removal/benchmark-bad8_R1.fastq.gz
=============================================
2737 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad8/adapter_trimmed/benchmark-bad8_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad8/host_removal/benchmark-bad8_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad8_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad8/host_removal/benchmark-bad8_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad8/host_removal/benchmark-bad8_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.066 s (24.116 µs/read; 2.49 M reads/minute).

=== Summary ===

Total reads processed:                   2,737
Reads with adapters:                     1,078 (39.4%)
Reads written (passing filters):         2,737 (100.0%)

Total basepairs processed:       140,663 bp
Quality-trimmed:                  24,305 bp (17.3%)
Total written (filtered):        105,728 bp (75.2%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 1078 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 32.4%
  C: 15.7%
  G: 25.5%
  T: 26.3%
  none/other: 0.1%

Overview of removed sequences
length	count	expect	max.err	error counts
1	762	684.2	0	762
2	165	171.1	0	165
3	36	42.8	0	36
4	10	10.7	0	10
6	1	0.7	0	1
8	1	0.0	0	1
11	1	0.0	1	0 1
16	2	0.0	1	0 2
18	1	0.0	1	0 1
19	2	0.0	1	0 2
23	1	0.0	1	1
25	1	0.0	1	0 1
27	3	0.0	1	2 1
30	1	0.0	1	0 1
31	2	0.0	1	0 2
33	1	0.0	1	0 1
39	1	0.0	1	1
40	1	0.0	1	0 1
41	3	0.0	1	0 3
47	1	0.0	1	0 1
49	2	0.0	1	0 2
50	1	0.0	1	0 1
57	2	0.0	1	1 1
60	2	0.0	1	0 2
61	1	0.0	1	0 1
63	1	0.0	1	0 1
65	1	0.0	1	0 1
73	1	0.0	1	0 1
75	1	0.0	1	0 1
77	1	0.0	1	0 1
78	2	0.0	1	0 2
83	1	0.0	1	1
87	1	0.0	1	0 1
90	1	0.0	1	0 1
93	1	0.0	1	0 1
96	1	0.0	1	0 1
99	1	0.0	1	0 1
100	1	0.0	1	0 1
101	1	0.0	1	1
103	1	0.0	1	0 1
104	1	0.0	1	0 1
108	1	0.0	1	0 1
110	1	0.0	1	0 1
111	1	0.0	1	0 1
112	2	0.0	1	1 1
113	1	0.0	1	0 1
114	2	0.0	1	0 2
115	2	0.0	1	0 2
116	4	0.0	1	1 3
118	3	0.0	1	0 3
119	2	0.0	1	0 2
120	6	0.0	1	1 5
121	6	0.0	1	0 6
122	8	0.0	1	1 7
123	7	0.0	1	2 5
124	3	0.0	1	0 3
126	2	0.0	1	1 1
127	1	0.0	1	0 1
128	1	0.0	1	0 1
129	1	0.0	1	0 1
130	2	0.0	1	0 2
135	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad8/host_removal/benchmark-bad8_R2.fastq.gz
=============================================
2737 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad8_R1_trimmed.fq.gz and benchmark-bad8_R2_trimmed.fq.gz
file_1: benchmark-bad8_R1_trimmed.fq.gz, file_2: benchmark-bad8_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad8_R1_trimmed.fq.gz and benchmark-bad8_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad8_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad8_R2_val_2.fq.gz

Total number of sequences analysed: 2737

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 160 (5.85%)


  >>> Now running FastQC on the validated data benchmark-bad8_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad8_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad8_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad8_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad8_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad8_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad8_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad8_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad8_R1_trimmed.fq.gz and benchmark-bad8_R2_trimmed.fq.gz

====================================================================================================

