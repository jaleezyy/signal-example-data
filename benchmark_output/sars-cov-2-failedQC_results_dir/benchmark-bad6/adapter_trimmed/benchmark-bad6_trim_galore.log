Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad6/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad6/host_removal/benchmark-bad6_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	23	CTGTCTCTTATA	129396	0.02
smallRNA	0	TGGAATTCTCGG	129396	0.00
Illumina	0	AGATCGGAAGAGC	129396	0.00
Using Nextera adapter for trimming (count: 23). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad6/adapter_trimmed/benchmark-bad6_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad6/host_removal/benchmark-bad6_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad6_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad6/host_removal/benchmark-bad6_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad6/host_removal/benchmark-bad6_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.488 s (11.503 µs/read; 5.22 M reads/minute).

=== Summary ===

Total reads processed:                 129,396
Reads with adapters:                    44,584 (34.5%)
Reads written (passing filters):       129,396 (100.0%)

Total basepairs processed:    13,775,507 bp
Quality-trimmed:                  35,047 bp (0.3%)
Total written (filtered):     13,680,425 bp (99.3%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 44584 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 46.6%
  C: 15.9%
  G: 17.5%
  T: 20.0%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	38618	32349.0	0	38618
2	4381	8087.2	0	4381
3	1080	2021.8	0	1080
4	339	505.5	0	339
5	29	126.4	0	29
6	8	31.6	0	8
7	2	7.9	0	2
9	11	0.5	0	1 10
11	2	0.0	1	0 2
12	1	0.0	1	0 1
13	2	0.0	1	0 2
16	1	0.0	1	0 1
17	1	0.0	1	0 1
20	1	0.0	1	0 1
21	1	0.0	1	0 1
22	1	0.0	1	1
25	2	0.0	1	0 2
30	1	0.0	1	0 1
31	1	0.0	1	0 1
34	2	0.0	1	1 1
35	1	0.0	1	1
36	1	0.0	1	0 1
39	3	0.0	1	0 3
40	1	0.0	1	1
42	1	0.0	1	0 1
44	3	0.0	1	1 2
45	1	0.0	1	1
46	1	0.0	1	0 1
48	1	0.0	1	0 1
50	2	0.0	1	0 2
51	1	0.0	1	0 1
52	3	0.0	1	0 3
53	3	0.0	1	1 2
54	3	0.0	1	1 2
55	1	0.0	1	0 1
58	2	0.0	1	1 1
59	2	0.0	1	0 2
60	2	0.0	1	0 2
61	2	0.0	1	1 1
62	3	0.0	1	0 3
64	1	0.0	1	0 1
65	1	0.0	1	0 1
67	3	0.0	1	0 3
68	1	0.0	1	0 1
70	1	0.0	1	0 1
71	5	0.0	1	1 4
72	1	0.0	1	0 1
73	2	0.0	1	1 1
75	4	0.0	1	0 4
76	2	0.0	1	0 2
77	1	0.0	1	0 1
78	5	0.0	1	3 2
80	1	0.0	1	0 1
81	3	0.0	1	0 3
84	1	0.0	1	0 1
85	1	0.0	1	0 1
87	1	0.0	1	0 1
90	1	0.0	1	0 1
91	2	0.0	1	0 2
92	1	0.0	1	0 1
93	2	0.0	1	1 1
94	1	0.0	1	0 1
95	1	0.0	1	0 1
96	3	0.0	1	0 3
97	2	0.0	1	0 2
98	1	0.0	1	0 1
100	2	0.0	1	0 2
105	2	0.0	1	1 1
106	1	0.0	1	1
107	1	0.0	1	0 1
110	1	0.0	1	1
113	1	0.0	1	0 1
114	1	0.0	1	0 1
115	1	0.0	1	0 1
118	1	0.0	1	1
119	3	0.0	1	0 3
124	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: benchmark-bad6/host_removal/benchmark-bad6_R1.fastq.gz
=============================================
129396 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad6/adapter_trimmed/benchmark-bad6_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad6/host_removal/benchmark-bad6_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad6_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad6/host_removal/benchmark-bad6_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad6/host_removal/benchmark-bad6_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.469 s (11.356 µs/read; 5.28 M reads/minute).

=== Summary ===

Total reads processed:                 129,396
Reads with adapters:                    44,530 (34.4%)
Reads written (passing filters):       129,396 (100.0%)

Total basepairs processed:    13,787,464 bp
Quality-trimmed:                  47,788 bp (0.3%)
Total written (filtered):     13,678,117 bp (99.2%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 44530 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 46.3%
  C: 16.0%
  G: 17.6%
  T: 20.1%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	38578	32349.0	0	38578
2	4332	8087.2	0	4332
3	1090	2021.8	0	1090
4	335	505.5	0	335
5	18	126.4	0	18
6	9	31.6	0	9
8	1	2.0	0	1
9	12	0.5	0	4 8
10	1	0.1	1	0 1
11	8	0.0	1	1 7
12	1	0.0	1	0 1
13	4	0.0	1	2 2
14	1	0.0	1	1
15	1	0.0	1	0 1
16	3	0.0	1	1 2
17	1	0.0	1	1
18	1	0.0	1	1
19	4	0.0	1	0 4
20	1	0.0	1	0 1
21	1	0.0	1	0 1
22	1	0.0	1	0 1
23	3	0.0	1	0 3
24	1	0.0	1	0 1
25	1	0.0	1	0 1
27	1	0.0	1	0 1
30	3	0.0	1	1 2
31	2	0.0	1	0 2
32	1	0.0	1	0 1
33	3	0.0	1	0 3
34	1	0.0	1	0 1
36	3	0.0	1	0 3
37	1	0.0	1	0 1
38	1	0.0	1	0 1
39	2	0.0	1	1 1
41	3	0.0	1	1 2
42	2	0.0	1	0 2
43	1	0.0	1	0 1
44	3	0.0	1	1 2
45	3	0.0	1	1 2
46	2	0.0	1	0 2
47	3	0.0	1	0 3
48	2	0.0	1	0 2
49	1	0.0	1	0 1
50	2	0.0	1	1 1
51	1	0.0	1	0 1
52	1	0.0	1	0 1
53	2	0.0	1	0 2
54	2	0.0	1	1 1
55	4	0.0	1	1 3
56	3	0.0	1	0 3
57	2	0.0	1	0 2
58	1	0.0	1	0 1
59	1	0.0	1	0 1
63	1	0.0	1	1
66	1	0.0	1	0 1
67	2	0.0	1	0 2
68	1	0.0	1	0 1
72	2	0.0	1	1 1
74	1	0.0	1	1
75	1	0.0	1	0 1
76	2	0.0	1	1 1
77	1	0.0	1	0 1
78	2	0.0	1	1 1
79	1	0.0	1	1
83	1	0.0	1	0 1
85	1	0.0	1	0 1
86	1	0.0	1	0 1
87	1	0.0	1	0 1
88	1	0.0	1	0 1
89	2	0.0	1	0 2
91	1	0.0	1	1
93	1	0.0	1	0 1
95	3	0.0	1	1 2
96	1	0.0	1	0 1
97	3	0.0	1	0 3
99	1	0.0	1	0 1
101	1	0.0	1	0 1
102	2	0.0	1	0 2
105	1	0.0	1	0 1
106	1	0.0	1	0 1
107	1	0.0	1	0 1
108	1	0.0	1	0 1
109	4	0.0	1	1 3
110	3	0.0	1	0 3
111	2	0.0	1	0 2
112	1	0.0	1	0 1
113	1	0.0	1	0 1
114	1	0.0	1	0 1
116	3	0.0	1	1 2
117	1	0.0	1	0 1
118	1	0.0	1	1
119	2	0.0	1	0 2
120	1	0.0	1	0 1
121	2	0.0	1	0 2
122	3	0.0	1	0 3
123	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad6/host_removal/benchmark-bad6_R2.fastq.gz
=============================================
129396 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad6_R1_trimmed.fq.gz and benchmark-bad6_R2_trimmed.fq.gz
file_1: benchmark-bad6_R1_trimmed.fq.gz, file_2: benchmark-bad6_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad6_R1_trimmed.fq.gz and benchmark-bad6_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad6_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad6_R2_val_2.fq.gz

Total number of sequences analysed: 129396

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 155 (0.12%)


  >>> Now running FastQC on the validated data benchmark-bad6_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad6_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad6_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad6_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad6_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad6_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad6_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad6_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad6_R1_trimmed.fq.gz and benchmark-bad6_R2_trimmed.fq.gz

====================================================================================================

