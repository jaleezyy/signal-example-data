Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad14/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad14/host_removal/benchmark-bad14_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	51	CTGTCTCTTATA	605201	0.01
smallRNA	0	TGGAATTCTCGG	605201	0.00
Illumina	0	AGATCGGAAGAGC	605201	0.00
Using Nextera adapter for trimming (count: 51). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad14/adapter_trimmed/benchmark-bad14_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad14/host_removal/benchmark-bad14_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad14_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad14/host_removal/benchmark-bad14_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad14/host_removal/benchmark-bad14_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 9.291 s (15.351 µs/read; 3.91 M reads/minute).

=== Summary ===

Total reads processed:                 605,201
Reads with adapters:                   172,819 (28.6%)
Reads written (passing filters):       605,201 (100.0%)

Total basepairs processed:    71,994,614 bp
Quality-trimmed:                  68,896 bp (0.1%)
Total written (filtered):     71,705,242 bp (99.6%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 172819 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 46.3%
  C: 16.3%
  G: 18.4%
  T: 19.1%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	149319	151300.2	0	149319
2	16737	37825.1	0	16737
3	5211	9456.3	0	5211
4	1056	2364.1	0	1056
5	167	591.0	0	167
6	40	147.8	0	40
7	2	36.9	0	2
8	7	9.2	0	7
9	4	2.3	0	0 4
10	3	0.6	1	0 3
11	6	0.1	1	3 3
12	2	0.0	1	0 2
13	16	0.0	1	12 4
14	2	0.0	1	0 2
15	6	0.0	1	3 3
16	1	0.0	1	0 1
17	5	0.0	1	0 5
18	5	0.0	1	0 5
19	3	0.0	1	2 1
20	2	0.0	1	0 2
21	2	0.0	1	1 1
23	4	0.0	1	1 3
24	4	0.0	1	1 3
25	3	0.0	1	1 2
27	1	0.0	1	0 1
28	2	0.0	1	1 1
30	4	0.0	1	1 3
31	1	0.0	1	0 1
32	1	0.0	1	0 1
33	3	0.0	1	0 3
34	3	0.0	1	1 2
39	3	0.0	1	1 2
40	1	0.0	1	0 1
41	2	0.0	1	0 2
42	3	0.0	1	0 3
43	2	0.0	1	1 1
44	5	0.0	1	0 5
45	4	0.0	1	2 2
46	2	0.0	1	0 2
48	3	0.0	1	0 3
49	1	0.0	1	0 1
50	1	0.0	1	0 1
52	2	0.0	1	0 2
53	4	0.0	1	1 3
54	3	0.0	1	0 3
55	4	0.0	1	0 4
56	3	0.0	1	2 1
57	3	0.0	1	0 3
58	6	0.0	1	0 6
59	2	0.0	1	0 2
60	5	0.0	1	1 4
61	6	0.0	1	2 4
62	2	0.0	1	1 1
63	1	0.0	1	0 1
64	2	0.0	1	0 2
65	2	0.0	1	0 2
66	1	0.0	1	0 1
67	1	0.0	1	0 1
68	1	0.0	1	0 1
71	3	0.0	1	1 2
72	1	0.0	1	0 1
73	6	0.0	1	0 6
74	5	0.0	1	0 5
75	3	0.0	1	1 2
76	9	0.0	1	4 5
77	5	0.0	1	0 5
78	6	0.0	1	1 5
79	4	0.0	1	0 4
80	3	0.0	1	0 3
81	3	0.0	1	0 3
82	2	0.0	1	0 2
84	3	0.0	1	1 2
85	1	0.0	1	0 1
86	3	0.0	1	0 3
87	1	0.0	1	0 1
88	2	0.0	1	0 2
89	2	0.0	1	0 2
90	2	0.0	1	1 1
91	3	0.0	1	1 2
93	1	0.0	1	0 1
94	3	0.0	1	0 3
95	4	0.0	1	1 3
96	2	0.0	1	0 2
97	2	0.0	1	0 2
98	2	0.0	1	0 2
99	2	0.0	1	0 2
100	1	0.0	1	0 1
102	3	0.0	1	1 2
103	2	0.0	1	0 2
104	3	0.0	1	0 3
106	3	0.0	1	0 3
107	4	0.0	1	0 4
108	5	0.0	1	0 5
110	2	0.0	1	0 2
111	2	0.0	1	0 2
112	2	0.0	1	0 2
113	2	0.0	1	1 1
115	1	0.0	1	0 1
116	1	0.0	1	0 1
117	1	0.0	1	0 1
119	3	0.0	1	1 2
121	1	0.0	1	0 1
122	2	0.0	1	0 2
124	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad14/host_removal/benchmark-bad14_R1.fastq.gz
=============================================
605201 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad14/adapter_trimmed/benchmark-bad14_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad14/host_removal/benchmark-bad14_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad14_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad14/host_removal/benchmark-bad14_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad14/host_removal/benchmark-bad14_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 9.952 s (16.444 µs/read; 3.65 M reads/minute).

=== Summary ===

Total reads processed:                 605,201
Reads with adapters:                   171,176 (28.3%)
Reads written (passing filters):       605,201 (100.0%)

Total basepairs processed:    72,194,847 bp
Quality-trimmed:                 279,567 bp (0.4%)
Total written (filtered):     71,647,295 bp (99.2%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 171176 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 45.7%
  C: 16.2%
  G: 18.6%
  T: 19.5%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	146191	151300.2	0	146191
2	17329	37825.1	0	17329
3	5197	9456.3	0	5197
4	1110	2364.1	0	1110
5	187	591.0	0	187
6	57	147.8	0	57
7	13	36.9	0	13
8	6	9.2	0	6
9	10	2.3	0	10
10	10	0.6	1	1 9
11	25	0.1	1	6 19
12	5	0.0	1	2 3
13	19	0.0	1	8 11
14	12	0.0	1	1 11
15	11	0.0	1	6 5
16	10	0.0	1	1 9
17	17	0.0	1	3 14
18	15	0.0	1	7 8
19	14	0.0	1	2 12
20	5	0.0	1	0 5
21	15	0.0	1	3 12
22	10	0.0	1	1 9
23	18	0.0	1	2 16
24	7	0.0	1	1 6
25	9	0.0	1	2 7
26	7	0.0	1	0 7
27	7	0.0	1	2 5
28	4	0.0	1	0 4
29	14	0.0	1	4 10
30	7	0.0	1	1 6
31	11	0.0	1	1 10
32	7	0.0	1	1 6
33	14	0.0	1	1 13
34	20	0.0	1	3 17
35	9	0.0	1	0 9
36	9	0.0	1	2 7
37	3	0.0	1	2 1
38	21	0.0	1	1 20
39	12	0.0	1	2 10
40	5	0.0	1	0 5
41	6	0.0	1	0 6
42	6	0.0	1	0 6
43	10	0.0	1	4 6
44	12	0.0	1	2 10
45	10	0.0	1	3 7
46	10	0.0	1	3 7
47	14	0.0	1	2 12
48	12	0.0	1	1 11
49	11	0.0	1	1 10
50	11	0.0	1	2 9
51	16	0.0	1	2 14
52	11	0.0	1	0 11
53	18	0.0	1	6 12
54	7	0.0	1	0 7
55	6	0.0	1	4 2
56	12	0.0	1	3 9
57	10	0.0	1	4 6
58	7	0.0	1	0 7
59	5	0.0	1	1 4
60	14	0.0	1	2 12
61	4	0.0	1	0 4
62	12	0.0	1	2 10
63	8	0.0	1	0 8
64	9	0.0	1	1 8
65	13	0.0	1	2 11
66	13	0.0	1	1 12
67	7	0.0	1	1 6
68	12	0.0	1	0 12
69	6	0.0	1	0 6
70	7	0.0	1	1 6
71	6	0.0	1	2 4
72	12	0.0	1	1 11
73	6	0.0	1	0 6
74	11	0.0	1	1 10
75	11	0.0	1	3 8
76	10	0.0	1	2 8
77	13	0.0	1	3 10
78	12	0.0	1	1 11
79	18	0.0	1	1 17
80	8	0.0	1	1 7
81	10	0.0	1	4 6
82	7	0.0	1	1 6
83	6	0.0	1	0 6
84	6	0.0	1	1 5
85	8	0.0	1	1 7
86	14	0.0	1	4 10
87	10	0.0	1	3 7
88	6	0.0	1	1 5
89	4	0.0	1	1 3
90	2	0.0	1	1 1
91	7	0.0	1	1 6
92	7	0.0	1	0 7
93	7	0.0	1	0 7
94	2	0.0	1	0 2
95	7	0.0	1	1 6
96	9	0.0	1	1 8
97	7	0.0	1	2 5
98	8	0.0	1	1 7
99	6	0.0	1	0 6
100	7	0.0	1	1 6
101	6	0.0	1	0 6
102	8	0.0	1	1 7
103	3	0.0	1	0 3
104	9	0.0	1	1 8
105	11	0.0	1	2 9
106	12	0.0	1	7 5
107	8	0.0	1	1 7
108	7	0.0	1	1 6
109	8	0.0	1	0 8
110	8	0.0	1	2 6
111	12	0.0	1	2 10
112	9	0.0	1	0 9
113	6	0.0	1	1 5
114	10	0.0	1	0 10
115	8	0.0	1	1 7
116	6	0.0	1	3 3
117	4	0.0	1	2 2
118	7	0.0	1	0 7
119	5	0.0	1	1 4
120	5	0.0	1	1 4
121	10	0.0	1	0 10
122	7	0.0	1	1 6
123	4	0.0	1	0 4
124	2	0.0	1	0 2
125	1	0.0	1	0 1
132	1	0.0	1	0 1
135	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad14/host_removal/benchmark-bad14_R2.fastq.gz
=============================================
605201 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad14_R1_trimmed.fq.gz and benchmark-bad14_R2_trimmed.fq.gz
file_1: benchmark-bad14_R1_trimmed.fq.gz, file_2: benchmark-bad14_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad14_R1_trimmed.fq.gz and benchmark-bad14_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad14_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad14_R2_val_2.fq.gz

Total number of sequences analysed: 605201

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 773 (0.13%)


  >>> Now running FastQC on the validated data benchmark-bad14_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad14_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad14_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad14_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad14_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad14_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad14_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad14_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad14_R1_trimmed.fq.gz and benchmark-bad14_R2_trimmed.fq.gz

====================================================================================================

