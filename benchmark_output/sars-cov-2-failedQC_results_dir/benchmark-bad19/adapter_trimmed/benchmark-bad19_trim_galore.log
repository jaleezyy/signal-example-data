Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad19/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad19/host_removal/benchmark-bad19_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	83	CTGTCTCTTATA	533747	0.02
smallRNA	0	TGGAATTCTCGG	533747	0.00
Illumina	0	AGATCGGAAGAGC	533747	0.00
Using Nextera adapter for trimming (count: 83). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad19/adapter_trimmed/benchmark-bad19_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad19/host_removal/benchmark-bad19_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad19_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad19/host_removal/benchmark-bad19_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad19/host_removal/benchmark-bad19_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 6.759 s (12.664 µs/read; 4.74 M reads/minute).

=== Summary ===

Total reads processed:                 533,747
Reads with adapters:                   151,627 (28.4%)
Reads written (passing filters):       533,747 (100.0%)

Total basepairs processed:    64,009,594 bp
Quality-trimmed:                  50,202 bp (0.1%)
Total written (filtered):     63,744,733 bp (99.6%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 151627 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 48.4%
  C: 15.2%
  G: 17.4%
  T: 18.9%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	126039	133436.8	0	126039
2	18010	33359.2	0	18010
3	5067	8339.8	0	5067
4	1624	2084.9	0	1624
5	303	521.2	0	303
6	103	130.3	0	103
7	10	32.6	0	10
8	11	8.1	0	11
9	4	2.0	0	3 1
10	3	0.5	1	0 3
11	1	0.1	1	0 1
12	2	0.0	1	0 2
13	4	0.0	1	0 4
14	2	0.0	1	1 1
15	5	0.0	1	1 4
16	3	0.0	1	1 2
17	11	0.0	1	1 10
18	3	0.0	1	0 3
19	8	0.0	1	2 6
20	2	0.0	1	0 2
21	3	0.0	1	1 2
22	3	0.0	1	0 3
23	5	0.0	1	0 5
24	3	0.0	1	1 2
25	4	0.0	1	2 2
26	6	0.0	1	3 3
27	1	0.0	1	0 1
28	8	0.0	1	1 7
29	1	0.0	1	0 1
30	3	0.0	1	0 3
31	5	0.0	1	0 5
32	6	0.0	1	2 4
33	2	0.0	1	0 2
34	1	0.0	1	0 1
35	1	0.0	1	0 1
36	2	0.0	1	1 1
37	6	0.0	1	2 4
38	2	0.0	1	1 1
39	6	0.0	1	0 6
40	4	0.0	1	1 3
41	3	0.0	1	1 2
42	9	0.0	1	2 7
43	4	0.0	1	1 3
44	7	0.0	1	0 7
45	8	0.0	1	3 5
46	9	0.0	1	1 8
47	1	0.0	1	1
48	2	0.0	1	0 2
49	2	0.0	1	2
50	3	0.0	1	0 3
51	7	0.0	1	1 6
52	4	0.0	1	0 4
53	9	0.0	1	3 6
54	5	0.0	1	1 4
55	4	0.0	1	0 4
56	2	0.0	1	0 2
57	3	0.0	1	0 3
58	6	0.0	1	0 6
59	2	0.0	1	0 2
60	4	0.0	1	0 4
61	12	0.0	1	4 8
63	3	0.0	1	0 3
64	3	0.0	1	0 3
65	2	0.0	1	2
66	4	0.0	1	1 3
67	6	0.0	1	0 6
68	9	0.0	1	2 7
69	5	0.0	1	0 5
70	4	0.0	1	0 4
71	5	0.0	1	2 3
72	8	0.0	1	2 6
73	5	0.0	1	0 5
74	8	0.0	1	1 7
75	8	0.0	1	2 6
76	7	0.0	1	0 7
77	8	0.0	1	3 5
78	8	0.0	1	2 6
79	8	0.0	1	2 6
80	7	0.0	1	2 5
81	4	0.0	1	1 3
82	1	0.0	1	0 1
83	4	0.0	1	1 3
84	4	0.0	1	0 4
85	1	0.0	1	0 1
86	3	0.0	1	0 3
87	5	0.0	1	2 3
88	5	0.0	1	1 4
89	4	0.0	1	1 3
90	6	0.0	1	3 3
91	4	0.0	1	0 4
92	1	0.0	1	0 1
93	1	0.0	1	0 1
94	10	0.0	1	1 9
95	5	0.0	1	1 4
96	3	0.0	1	0 3
97	4	0.0	1	0 4
98	4	0.0	1	0 4
99	4	0.0	1	0 4
100	2	0.0	1	1 1
101	5	0.0	1	1 4
102	1	0.0	1	0 1
103	3	0.0	1	1 2
104	2	0.0	1	0 2
105	3	0.0	1	0 3
106	2	0.0	1	1 1
107	3	0.0	1	0 3
108	5	0.0	1	0 5
109	1	0.0	1	0 1
110	3	0.0	1	1 2
111	5	0.0	1	1 4
112	1	0.0	1	0 1
113	4	0.0	1	0 4
115	3	0.0	1	0 3
116	2	0.0	1	0 2
117	2	0.0	1	0 2
118	1	0.0	1	1
119	1	0.0	1	0 1
120	1	0.0	1	0 1
122	1	0.0	1	1
123	2	0.0	1	0 2

RUN STATISTICS FOR INPUT FILE: benchmark-bad19/host_removal/benchmark-bad19_R1.fastq.gz
=============================================
533747 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad19/adapter_trimmed/benchmark-bad19_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad19/host_removal/benchmark-bad19_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad19_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad19/host_removal/benchmark-bad19_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad19/host_removal/benchmark-bad19_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 6.721 s (12.592 µs/read; 4.77 M reads/minute).

=== Summary ===

Total reads processed:                 533,747
Reads with adapters:                   150,939 (28.3%)
Reads written (passing filters):       533,747 (100.0%)

Total basepairs processed:    64,027,100 bp
Quality-trimmed:                  92,105 bp (0.1%)
Total written (filtered):     63,730,394 bp (99.5%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 150939 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 47.7%
  C: 15.2%
  G: 17.8%
  T: 19.3%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	125230	133436.8	0	125230
2	18028	33359.2	0	18028
3	5326	8339.8	0	5326
4	1608	2084.9	0	1608
5	286	521.2	0	286
6	105	130.3	0	105
7	8	32.6	0	8
8	6	8.1	0	6
9	5	2.0	0	4 1
10	7	0.5	1	1 6
11	7	0.1	1	3 4
12	6	0.0	1	1 5
13	6	0.0	1	2 4
14	1	0.0	1	0 1
15	4	0.0	1	1 3
16	5	0.0	1	1 4
17	6	0.0	1	2 4
18	3	0.0	1	3
19	6	0.0	1	2 4
20	5	0.0	1	1 4
21	4	0.0	1	0 4
22	3	0.0	1	0 3
23	8	0.0	1	1 7
24	2	0.0	1	0 2
25	3	0.0	1	1 2
26	4	0.0	1	3 1
27	5	0.0	1	1 4
28	3	0.0	1	0 3
29	7	0.0	1	0 7
30	2	0.0	1	0 2
31	2	0.0	1	0 2
32	3	0.0	1	1 2
33	2	0.0	1	1 1
34	5	0.0	1	1 4
35	4	0.0	1	1 3
36	3	0.0	1	1 2
37	1	0.0	1	0 1
38	4	0.0	1	2 2
39	6	0.0	1	2 4
40	2	0.0	1	1 1
42	3	0.0	1	1 2
43	5	0.0	1	2 3
44	4	0.0	1	0 4
45	2	0.0	1	0 2
46	6	0.0	1	0 6
47	5	0.0	1	2 3
48	1	0.0	1	0 1
49	3	0.0	1	0 3
50	5	0.0	1	0 5
51	4	0.0	1	0 4
52	2	0.0	1	0 2
53	3	0.0	1	1 2
54	4	0.0	1	1 3
55	1	0.0	1	1
56	2	0.0	1	1 1
57	5	0.0	1	2 3
58	1	0.0	1	0 1
59	2	0.0	1	0 2
60	1	0.0	1	0 1
61	3	0.0	1	0 3
62	3	0.0	1	0 3
63	4	0.0	1	1 3
64	5	0.0	1	1 4
65	2	0.0	1	2
66	5	0.0	1	2 3
67	1	0.0	1	0 1
68	7	0.0	1	0 7
69	3	0.0	1	0 3
70	2	0.0	1	1 1
71	2	0.0	1	0 2
72	3	0.0	1	0 3
73	4	0.0	1	1 3
74	7	0.0	1	1 6
75	2	0.0	1	0 2
76	2	0.0	1	0 2
77	4	0.0	1	0 4
78	1	0.0	1	0 1
79	2	0.0	1	1 1
81	7	0.0	1	1 6
82	1	0.0	1	0 1
83	7	0.0	1	2 5
84	6	0.0	1	0 6
85	1	0.0	1	0 1
86	4	0.0	1	1 3
87	2	0.0	1	0 2
88	2	0.0	1	0 2
89	3	0.0	1	0 3
92	1	0.0	1	0 1
93	3	0.0	1	1 2
95	3	0.0	1	0 3
96	2	0.0	1	0 2
97	3	0.0	1	0 3
98	2	0.0	1	0 2
99	5	0.0	1	1 4
100	3	0.0	1	0 3
101	2	0.0	1	1 1
103	2	0.0	1	0 2
104	2	0.0	1	0 2
105	2	0.0	1	0 2
106	2	0.0	1	0 2
107	3	0.0	1	1 2
108	2	0.0	1	0 2
109	2	0.0	1	0 2
111	1	0.0	1	0 1
112	2	0.0	1	0 2
113	1	0.0	1	0 1
114	1	0.0	1	0 1
115	1	0.0	1	0 1
117	2	0.0	1	0 2
118	2	0.0	1	0 2
119	4	0.0	1	0 4
122	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad19/host_removal/benchmark-bad19_R2.fastq.gz
=============================================
533747 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad19_R1_trimmed.fq.gz and benchmark-bad19_R2_trimmed.fq.gz
file_1: benchmark-bad19_R1_trimmed.fq.gz, file_2: benchmark-bad19_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad19_R1_trimmed.fq.gz and benchmark-bad19_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad19_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad19_R2_val_2.fq.gz

Total number of sequences analysed: 533747

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 174 (0.03%)


  >>> Now running FastQC on the validated data benchmark-bad19_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad19_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad19_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad19_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad19_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad19_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad19_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad19_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad19_R1_trimmed.fq.gz and benchmark-bad19_R2_trimmed.fq.gz

====================================================================================================

