Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad12/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad12/host_removal/benchmark-bad12_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	1	CTGTCTCTTATA	2602	0.04
Illumina	0	AGATCGGAAGAGC	2602	0.00
smallRNA	0	TGGAATTCTCGG	2602	0.00
Using Nextera adapter for trimming (count: 1). Second best hit was Illumina (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad12/adapter_trimmed/benchmark-bad12_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad12/host_removal/benchmark-bad12_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad12_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad12/host_removal/benchmark-bad12_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad12/host_removal/benchmark-bad12_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.068 s (26.261 µs/read; 2.28 M reads/minute).

=== Summary ===

Total reads processed:                   2,602
Reads with adapters:                       561 (21.6%)
Reads written (passing filters):         2,602 (100.0%)

Total basepairs processed:       339,534 bp
Quality-trimmed:                     383 bp (0.1%)
Total written (filtered):        338,236 bp (99.6%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 561 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 43.9%
  C: 18.4%
  G: 21.4%
  T: 16.4%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	464	650.5	0	464
2	64	162.6	0	64
3	20	40.7	0	20
4	6	10.2	0	6
5	2	2.5	0	2
16	1	0.0	1	0 1
48	1	0.0	1	0 1
50	1	0.0	1	0 1
54	1	0.0	1	0 1
61	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: benchmark-bad12/host_removal/benchmark-bad12_R1.fastq.gz
=============================================
2602 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad12/adapter_trimmed/benchmark-bad12_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad12/host_removal/benchmark-bad12_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad12_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad12/host_removal/benchmark-bad12_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad12/host_removal/benchmark-bad12_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.069 s (26.483 µs/read; 2.27 M reads/minute).

=== Summary ===

Total reads processed:                   2,602
Reads with adapters:                       585 (22.5%)
Reads written (passing filters):         2,602 (100.0%)

Total basepairs processed:       339,998 bp
Quality-trimmed:                   1,913 bp (0.6%)
Total written (filtered):        337,028 bp (99.1%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 585 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 41.7%
  C: 20.0%
  G: 18.5%
  T: 19.8%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	491	650.5	0	491
2	61	162.6	0	61
3	20	40.7	0	20
4	5	10.2	0	5
5	3	2.5	0	3
6	1	0.6	0	1
75	1	0.0	1	0 1
82	1	0.0	1	0 1
92	1	0.0	1	0 1
94	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad12/host_removal/benchmark-bad12_R2.fastq.gz
=============================================
2602 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad12_R1_trimmed.fq.gz and benchmark-bad12_R2_trimmed.fq.gz
file_1: benchmark-bad12_R1_trimmed.fq.gz, file_2: benchmark-bad12_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad12_R1_trimmed.fq.gz and benchmark-bad12_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad12_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad12_R2_val_2.fq.gz

Total number of sequences analysed: 2602

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 6 (0.23%)


  >>> Now running FastQC on the validated data benchmark-bad12_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad12_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad12_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad12_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad12_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad12_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad12_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad12_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad12_R1_trimmed.fq.gz and benchmark-bad12_R2_trimmed.fq.gz

====================================================================================================

