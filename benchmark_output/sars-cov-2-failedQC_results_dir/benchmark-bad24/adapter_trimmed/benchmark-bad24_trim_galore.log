Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad24/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad24/host_removal/benchmark-bad24_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	9	CTGTCTCTTATA	97800	0.01
smallRNA	0	TGGAATTCTCGG	97800	0.00
Illumina	0	AGATCGGAAGAGC	97800	0.00
Using Nextera adapter for trimming (count: 9). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad24/adapter_trimmed/benchmark-bad24_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad24/host_removal/benchmark-bad24_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad24_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad24/host_removal/benchmark-bad24_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad24/host_removal/benchmark-bad24_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.484 s (15.169 µs/read; 3.96 M reads/minute).

=== Summary ===

Total reads processed:                  97,800
Reads with adapters:                    12,307 (12.6%)
Reads written (passing filters):        97,800 (100.0%)

Total basepairs processed:    13,857,086 bp
Quality-trimmed:               2,573,048 bp (18.6%)
Total written (filtered):     11,268,062 bp (81.3%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 12307 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 48.8%
  C: 14.5%
  G: 16.4%
  T: 20.4%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	10360	24450.0	0	10360
2	1455	6112.5	0	1455
3	395	1528.1	0	395
4	37	382.0	0	37
5	33	95.5	0	33
6	4	23.9	0	4
8	1	1.5	0	1
10	1	0.1	1	0 1
21	1	0.0	1	1
22	1	0.0	1	0 1
25	1	0.0	1	0 1
33	1	0.0	1	1
34	1	0.0	1	0 1
35	1	0.0	1	1
39	2	0.0	1	1 1
40	1	0.0	1	0 1
45	1	0.0	1	0 1
52	1	0.0	1	1
58	1	0.0	1	1
60	1	0.0	1	0 1
61	1	0.0	1	0 1
62	1	0.0	1	1
75	1	0.0	1	0 1
78	1	0.0	1	0 1
83	1	0.0	1	1
87	1	0.0	1	0 1
98	1	0.0	1	1
119	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad24/host_removal/benchmark-bad24_R1.fastq.gz
=============================================
97800 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad24/adapter_trimmed/benchmark-bad24_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad24/host_removal/benchmark-bad24_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad24_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad24/host_removal/benchmark-bad24_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad24/host_removal/benchmark-bad24_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 1.554 s (15.886 µs/read; 3.78 M reads/minute).

=== Summary ===

Total reads processed:                  97,800
Reads with adapters:                    12,267 (12.5%)
Reads written (passing filters):        97,800 (100.0%)

Total basepairs processed:    13,860,532 bp
Quality-trimmed:               2,577,433 bp (18.6%)
Total written (filtered):     11,266,163 bp (81.3%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 12267 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 49.1%
  C: 14.4%
  G: 16.3%
  T: 20.2%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	10313	24450.0	0	10313
2	1406	6112.5	0	1406
3	427	1528.1	0	427
4	50	382.0	0	50
5	38	95.5	0	38
8	1	1.5	0	1
14	2	0.0	1	1 1
24	2	0.0	1	1 1
31	1	0.0	1	1
36	1	0.0	1	1
37	1	0.0	1	0 1
49	1	0.0	1	0 1
54	1	0.0	1	0 1
56	1	0.0	1	1
58	2	0.0	1	0 2
59	1	0.0	1	0 1
67	1	0.0	1	0 1
69	1	0.0	1	0 1
73	1	0.0	1	0 1
74	1	0.0	1	1
76	1	0.0	1	1
78	2	0.0	1	1 1
79	1	0.0	1	0 1
80	2	0.0	1	2
84	1	0.0	1	1
86	1	0.0	1	0 1
87	1	0.0	1	1
92	1	0.0	1	0 1
96	1	0.0	1	1
101	2	0.0	1	1 1
104	1	0.0	1	0 1
113	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad24/host_removal/benchmark-bad24_R2.fastq.gz
=============================================
97800 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad24_R1_trimmed.fq.gz and benchmark-bad24_R2_trimmed.fq.gz
file_1: benchmark-bad24_R1_trimmed.fq.gz, file_2: benchmark-bad24_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad24_R1_trimmed.fq.gz and benchmark-bad24_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad24_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad24_R2_val_2.fq.gz

Total number of sequences analysed: 97800

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 17650 (18.05%)


  >>> Now running FastQC on the validated data benchmark-bad24_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad24_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad24_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad24_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad24_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad24_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad24_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad24_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad24_R1_trimmed.fq.gz and benchmark-bad24_R2_trimmed.fq.gz

====================================================================================================

