Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad23/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad23/host_removal/benchmark-bad23_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	10	CTGTCTCTTATA	119423	0.01
Illumina	0	AGATCGGAAGAGC	119423	0.00
smallRNA	0	TGGAATTCTCGG	119423	0.00
Using Nextera adapter for trimming (count: 10). Second best hit was Illumina (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad23/adapter_trimmed/benchmark-bad23_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad23/host_removal/benchmark-bad23_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad23_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad23/host_removal/benchmark-bad23_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad23/host_removal/benchmark-bad23_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 2.832 s (23.710 µs/read; 2.53 M reads/minute).

=== Summary ===

Total reads processed:                 119,423
Reads with adapters:                    16,156 (13.5%)
Reads written (passing filters):       119,423 (100.0%)

Total basepairs processed:    17,263,262 bp
Quality-trimmed:                 359,377 bp (2.1%)
Total written (filtered):     16,881,816 bp (97.8%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 16156 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 41.9%
  C: 18.5%
  G: 18.0%
  T: 21.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	12881	29855.8	0	12881
2	2342	7463.9	0	2342
3	722	1866.0	0	722
4	69	466.5	0	69
5	104	116.6	0	104
6	8	29.2	0	8
9	1	0.5	0	0 1
10	1	0.1	1	0 1
12	1	0.0	1	0 1
15	1	0.0	1	0 1
17	3	0.0	1	1 2
18	1	0.0	1	1
25	1	0.0	1	0 1
26	1	0.0	1	1
28	1	0.0	1	0 1
29	1	0.0	1	0 1
34	1	0.0	1	1
40	2	0.0	1	0 2
50	1	0.0	1	1
52	1	0.0	1	0 1
54	1	0.0	1	1
61	1	0.0	1	0 1
68	1	0.0	1	0 1
69	1	0.0	1	1
71	1	0.0	1	0 1
77	2	0.0	1	1 1
85	2	0.0	1	0 2
94	1	0.0	1	1
95	1	0.0	1	1
109	1	0.0	1	0 1
110	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad23/host_removal/benchmark-bad23_R1.fastq.gz
=============================================
119423 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad23/adapter_trimmed/benchmark-bad23_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad23/host_removal/benchmark-bad23_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad23_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad23/host_removal/benchmark-bad23_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad23/host_removal/benchmark-bad23_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 3.082 s (25.804 µs/read; 2.33 M reads/minute).

=== Summary ===

Total reads processed:                 119,423
Reads with adapters:                    20,813 (17.4%)
Reads written (passing filters):       119,423 (100.0%)

Total basepairs processed:    17,433,625 bp
Quality-trimmed:                 416,801 bp (2.4%)
Total written (filtered):     16,944,401 bp (97.2%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 20813 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 32.7%
  C: 24.5%
  G: 18.9%
  T: 23.9%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	15409	29855.8	0	15409
2	3269	7463.9	0	3269
3	993	1866.0	0	993
4	129	466.5	0	129
5	121	116.6	0	121
6	11	29.2	0	11
7	2	7.3	0	2
8	1	1.8	0	1
9	1	0.5	0	1
10	2	0.1	1	0 2
11	22	0.0	1	2 20
12	1	0.0	1	0 1
13	16	0.0	1	0 16
14	5	0.0	1	0 5
15	21	0.0	1	2 19
16	10	0.0	1	3 7
17	18	0.0	1	3 15
18	1	0.0	1	0 1
19	6	0.0	1	1 5
20	6	0.0	1	2 4
21	4	0.0	1	1 3
22	6	0.0	1	1 5
23	25	0.0	1	2 23
24	3	0.0	1	3
25	4	0.0	1	2 2
26	13	0.0	1	0 13
27	5	0.0	1	1 4
28	6	0.0	1	2 4
29	15	0.0	1	5 10
30	7	0.0	1	1 6
31	9	0.0	1	2 7
32	17	0.0	1	3 14
33	16	0.0	1	2 14
34	8	0.0	1	1 7
35	3	0.0	1	0 3
36	22	0.0	1	1 21
37	5	0.0	1	0 5
38	17	0.0	1	4 13
39	6	0.0	1	2 4
40	9	0.0	1	0 9
41	18	0.0	1	2 16
42	11	0.0	1	0 11
43	13	0.0	1	2 11
44	30	0.0	1	2 28
45	48	0.0	1	3 45
46	23	0.0	1	3 20
47	6	0.0	1	1 5
48	15	0.0	1	2 13
49	11	0.0	1	1 10
50	7	0.0	1	1 6
51	10	0.0	1	3 7
52	9	0.0	1	3 6
53	29	0.0	1	5 24
54	19	0.0	1	4 15
55	10	0.0	1	1 9
56	5	0.0	1	0 5
57	10	0.0	1	0 10
58	6	0.0	1	2 4
59	6	0.0	1	1 5
60	6	0.0	1	1 5
61	5	0.0	1	1 4
62	5	0.0	1	1 4
63	3	0.0	1	1 2
64	4	0.0	1	1 3
65	4	0.0	1	0 4
66	3	0.0	1	1 2
67	7	0.0	1	0 7
68	6	0.0	1	2 4
69	3	0.0	1	1 2
70	4	0.0	1	0 4
71	5	0.0	1	0 5
72	5	0.0	1	1 4
73	3	0.0	1	1 2
74	4	0.0	1	2 2
75	8	0.0	1	0 8
76	9	0.0	1	3 6
77	5	0.0	1	0 5
78	9	0.0	1	0 9
79	6	0.0	1	2 4
80	6	0.0	1	1 5
81	7	0.0	1	2 5
82	6	0.0	1	2 4
83	7	0.0	1	1 6
84	5	0.0	1	0 5
85	9	0.0	1	2 7
86	7	0.0	1	0 7
87	4	0.0	1	1 3
88	5	0.0	1	1 4
89	7	0.0	1	1 6
90	8	0.0	1	5 3
91	3	0.0	1	1 2
92	2	0.0	1	0 2
93	6	0.0	1	1 5
94	6	0.0	1	1 5
95	6	0.0	1	1 5
96	8	0.0	1	2 6
97	3	0.0	1	0 3
98	1	0.0	1	0 1
99	5	0.0	1	1 4
100	4	0.0	1	0 4
101	6	0.0	1	0 6
102	2	0.0	1	0 2
103	5	0.0	1	1 4
104	2	0.0	1	0 2
105	5	0.0	1	1 4
106	5	0.0	1	0 5
107	5	0.0	1	3 2
108	4	0.0	1	1 3
109	2	0.0	1	0 2
110	3	0.0	1	1 2
112	2	0.0	1	0 2
113	1	0.0	1	0 1
114	1	0.0	1	0 1
115	2	0.0	1	0 2
116	3	0.0	1	0 3
117	1	0.0	1	1
118	1	0.0	1	0 1
119	1	0.0	1	0 1
120	4	0.0	1	0 4
121	3	0.0	1	1 2
122	2	0.0	1	0 2
123	1	0.0	1	0 1
126	1	0.0	1	0 1
143	1	0.0	1	0 1
148	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad23/host_removal/benchmark-bad23_R2.fastq.gz
=============================================
119423 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad23_R1_trimmed.fq.gz and benchmark-bad23_R2_trimmed.fq.gz
file_1: benchmark-bad23_R1_trimmed.fq.gz, file_2: benchmark-bad23_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad23_R1_trimmed.fq.gz and benchmark-bad23_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad23_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad23_R2_val_2.fq.gz

Total number of sequences analysed: 119423

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 2556 (2.14%)


  >>> Now running FastQC on the validated data benchmark-bad23_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad23_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad23_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad23_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad23_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad23_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad23_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad23_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad23_R1_trimmed.fq.gz and benchmark-bad23_R2_trimmed.fq.gz

====================================================================================================

