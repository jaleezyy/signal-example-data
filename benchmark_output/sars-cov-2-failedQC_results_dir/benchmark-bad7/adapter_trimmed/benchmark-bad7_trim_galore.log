Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad7/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad7/host_removal/benchmark-bad7_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	7	CTGTCTCTTATA	14307	0.05
Illumina	1	AGATCGGAAGAGC	14307	0.01
smallRNA	0	TGGAATTCTCGG	14307	0.00
Using Nextera adapter for trimming (count: 7). Second best hit was Illumina (count: 1)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad7/adapter_trimmed/benchmark-bad7_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad7/host_removal/benchmark-bad7_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad7_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad7/host_removal/benchmark-bad7_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad7/host_removal/benchmark-bad7_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.344 s (24.058 µs/read; 2.49 M reads/minute).

=== Summary ===

Total reads processed:                  14,307
Reads with adapters:                     3,637 (25.4%)
Reads written (passing filters):        14,307 (100.0%)

Total basepairs processed:     1,773,088 bp
Quality-trimmed:                   1,838 bp (0.1%)
Total written (filtered):      1,765,639 bp (99.6%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 3637 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 47.4%
  C: 14.2%
  G: 19.2%
  T: 19.2%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	3059	3576.8	0	3059
2	418	894.2	0	418
3	106	223.5	0	106
4	25	55.9	0	25
5	5	14.0	0	5
11	1	0.0	1	0 1
16	1	0.0	1	0 1
17	1	0.0	1	0 1
21	1	0.0	1	0 1
22	1	0.0	1	0 1
24	1	0.0	1	1
35	1	0.0	1	1
37	1	0.0	1	0 1
43	1	0.0	1	1
46	1	0.0	1	0 1
51	1	0.0	1	0 1
57	1	0.0	1	0 1
58	1	0.0	1	0 1
59	2	0.0	1	2
61	1	0.0	1	0 1
68	1	0.0	1	1
70	2	0.0	1	1 1
74	1	0.0	1	0 1
80	1	0.0	1	0 1
81	1	0.0	1	0 1
102	1	0.0	1	0 1
111	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad7/host_removal/benchmark-bad7_R1.fastq.gz
=============================================
14307 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad7/adapter_trimmed/benchmark-bad7_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad7/host_removal/benchmark-bad7_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad7_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad7/host_removal/benchmark-bad7_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad7/host_removal/benchmark-bad7_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 0.331 s (23.122 µs/read; 2.59 M reads/minute).

=== Summary ===

Total reads processed:                  14,307
Reads with adapters:                     3,556 (24.9%)
Reads written (passing filters):        14,307 (100.0%)

Total basepairs processed:     1,774,191 bp
Quality-trimmed:                   4,688 bp (0.3%)
Total written (filtered):      1,764,398 bp (99.4%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 3556 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 48.3%
  C: 14.4%
  G: 18.1%
  T: 19.3%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	3023	3576.8	0	3023
2	346	894.2	0	346
3	142	223.5	0	142
4	25	55.9	0	25
5	1	14.0	0	1
6	1	3.5	0	1
8	2	0.2	0	2
11	1	0.0	1	0 1
17	1	0.0	1	0 1
19	1	0.0	1	0 1
24	1	0.0	1	0 1
33	1	0.0	1	1
37	1	0.0	1	0 1
40	1	0.0	1	1
44	1	0.0	1	0 1
53	1	0.0	1	0 1
57	1	0.0	1	0 1
66	1	0.0	1	0 1
67	1	0.0	1	0 1
77	1	0.0	1	1
79	1	0.0	1	0 1
104	1	0.0	1	1
109	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: benchmark-bad7/host_removal/benchmark-bad7_R2.fastq.gz
=============================================
14307 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad7_R1_trimmed.fq.gz and benchmark-bad7_R2_trimmed.fq.gz
file_1: benchmark-bad7_R1_trimmed.fq.gz, file_2: benchmark-bad7_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad7_R1_trimmed.fq.gz and benchmark-bad7_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad7_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad7_R2_val_2.fq.gz

Total number of sequences analysed: 14307

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 19 (0.13%)


  >>> Now running FastQC on the validated data benchmark-bad7_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad7_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad7_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad7_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad7_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad7_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad7_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad7_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad7_R1_trimmed.fq.gz and benchmark-bad7_R2_trimmed.fq.gz

====================================================================================================

