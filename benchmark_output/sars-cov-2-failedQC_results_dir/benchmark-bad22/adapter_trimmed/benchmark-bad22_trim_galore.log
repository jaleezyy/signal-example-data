Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad22/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad22/host_removal/benchmark-bad22_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	59	CTGTCTCTTATA	228892	0.03
smallRNA	0	TGGAATTCTCGG	228892	0.00
Illumina	0	AGATCGGAAGAGC	228892	0.00
Using Nextera adapter for trimming (count: 59). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad22/adapter_trimmed/benchmark-bad22_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad22/host_removal/benchmark-bad22_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad22_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad22/host_removal/benchmark-bad22_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad22/host_removal/benchmark-bad22_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 4.222 s (18.444 µs/read; 3.25 M reads/minute).

=== Summary ===

Total reads processed:                 228,892
Reads with adapters:                    51,167 (22.4%)
Reads written (passing filters):       228,892 (100.0%)

Total basepairs processed:    30,263,662 bp
Quality-trimmed:               2,209,936 bp (7.3%)
Total written (filtered):     27,982,161 bp (92.5%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 51167 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 45.9%
  C: 15.4%
  G: 18.0%
  T: 20.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	43487	57223.0	0	43487
2	5243	14305.8	0	5243
3	1762	3576.4	0	1762
4	247	894.1	0	247
5	222	223.5	0	222
6	10	55.9	0	10
7	1	14.0	0	1
10	4	0.2	1	0 4
13	4	0.0	1	0 4
14	1	0.0	1	0 1
15	3	0.0	1	1 2
16	1	0.0	1	0 1
17	4	0.0	1	0 4
18	4	0.0	1	2 2
19	4	0.0	1	2 2
20	2	0.0	1	1 1
21	2	0.0	1	1 1
23	2	0.0	1	0 2
24	3	0.0	1	1 2
25	4	0.0	1	1 3
26	1	0.0	1	0 1
27	3	0.0	1	0 3
28	3	0.0	1	0 3
29	6	0.0	1	3 3
30	5	0.0	1	0 5
31	1	0.0	1	0 1
32	1	0.0	1	1
33	1	0.0	1	0 1
34	6	0.0	1	3 3
35	1	0.0	1	0 1
37	6	0.0	1	2 4
38	4	0.0	1	1 3
39	1	0.0	1	1
41	1	0.0	1	0 1
42	2	0.0	1	1 1
43	3	0.0	1	1 2
44	1	0.0	1	0 1
45	8	0.0	1	3 5
46	4	0.0	1	2 2
47	2	0.0	1	1 1
48	1	0.0	1	0 1
49	1	0.0	1	0 1
51	5	0.0	1	2 3
53	5	0.0	1	1 4
54	4	0.0	1	2 2
55	1	0.0	1	1
56	4	0.0	1	1 3
57	2	0.0	1	0 2
58	2	0.0	1	0 2
60	1	0.0	1	0 1
61	2	0.0	1	0 2
62	1	0.0	1	1
63	1	0.0	1	1
64	3	0.0	1	1 2
66	1	0.0	1	0 1
67	2	0.0	1	1 1
68	3	0.0	1	0 3
69	2	0.0	1	0 2
70	2	0.0	1	1 1
71	3	0.0	1	2 1
73	2	0.0	1	0 2
74	4	0.0	1	2 2
75	3	0.0	1	1 2
76	3	0.0	1	2 1
77	4	0.0	1	4
78	3	0.0	1	1 2
79	1	0.0	1	0 1
80	2	0.0	1	0 2
83	3	0.0	1	2 1
84	3	0.0	1	0 3
86	2	0.0	1	0 2
87	1	0.0	1	0 1
89	2	0.0	1	1 1
91	1	0.0	1	0 1
92	2	0.0	1	0 2
94	1	0.0	1	0 1
95	1	0.0	1	0 1
99	1	0.0	1	1
101	2	0.0	1	1 1
106	1	0.0	1	0 1
108	1	0.0	1	0 1
110	1	0.0	1	1
112	1	0.0	1	1
113	1	0.0	1	0 1
114	2	0.0	1	0 2
116	1	0.0	1	0 1
122	1	0.0	1	0 1
129	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad22/host_removal/benchmark-bad22_R1.fastq.gz
=============================================
228892 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad22/adapter_trimmed/benchmark-bad22_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad22/host_removal/benchmark-bad22_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad22_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad22/host_removal/benchmark-bad22_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad22/host_removal/benchmark-bad22_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 4.503 s (19.672 µs/read; 3.05 M reads/minute).

=== Summary ===

Total reads processed:                 228,892
Reads with adapters:                    50,561 (22.1%)
Reads written (passing filters):       228,892 (100.0%)

Total basepairs processed:    30,326,431 bp
Quality-trimmed:               2,244,368 bp (7.4%)
Total written (filtered):     27,997,302 bp (92.3%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 50561 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 44.2%
  C: 16.2%
  G: 18.2%
  T: 21.4%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	42138	57223.0	0	42138
2	5453	14305.8	0	5453
3	1945	3576.4	0	1945
4	354	894.1	0	354
5	206	223.5	0	206
6	19	55.9	0	19
7	4	14.0	0	4
8	3	3.5	0	3
9	4	0.9	0	2 2
10	3	0.2	1	0 3
11	7	0.1	1	2 5
12	3	0.0	1	0 3
13	2	0.0	1	0 2
14	8	0.0	1	3 5
15	6	0.0	1	1 5
16	9	0.0	1	1 8
17	10	0.0	1	3 7
18	8	0.0	1	3 5
19	3	0.0	1	1 2
20	2	0.0	1	0 2
21	7	0.0	1	1 6
22	10	0.0	1	3 7
23	6	0.0	1	1 5
24	6	0.0	1	1 5
25	7	0.0	1	0 7
26	4	0.0	1	1 3
27	2	0.0	1	0 2
28	3	0.0	1	0 3
29	7	0.0	1	3 4
30	5	0.0	1	2 3
31	4	0.0	1	1 3
32	3	0.0	1	1 2
33	9	0.0	1	4 5
34	5	0.0	1	1 4
35	7	0.0	1	0 7
36	5	0.0	1	0 5
37	6	0.0	1	1 5
38	7	0.0	1	5 2
39	7	0.0	1	3 4
40	5	0.0	1	1 4
41	4	0.0	1	4
42	3	0.0	1	1 2
43	9	0.0	1	3 6
44	7	0.0	1	2 5
45	8	0.0	1	0 8
46	8	0.0	1	1 7
47	9	0.0	1	2 7
48	7	0.0	1	3 4
49	5	0.0	1	1 4
50	3	0.0	1	2 1
51	6	0.0	1	1 5
52	5	0.0	1	4 1
53	3	0.0	1	0 3
54	2	0.0	1	2
55	4	0.0	1	1 3
56	3	0.0	1	0 3
57	5	0.0	1	1 4
58	5	0.0	1	2 3
59	2	0.0	1	0 2
60	3	0.0	1	1 2
61	4	0.0	1	2 2
62	1	0.0	1	1
63	2	0.0	1	0 2
64	4	0.0	1	1 3
65	2	0.0	1	1 1
66	1	0.0	1	0 1
67	3	0.0	1	1 2
68	5	0.0	1	2 3
69	4	0.0	1	0 4
70	3	0.0	1	2 1
71	2	0.0	1	0 2
72	2	0.0	1	0 2
73	2	0.0	1	0 2
74	4	0.0	1	0 4
75	5	0.0	1	1 4
76	2	0.0	1	0 2
77	2	0.0	1	1 1
78	6	0.0	1	4 2
79	2	0.0	1	0 2
80	2	0.0	1	0 2
81	6	0.0	1	2 4
82	1	0.0	1	1
83	3	0.0	1	0 3
84	6	0.0	1	1 5
85	4	0.0	1	0 4
86	4	0.0	1	0 4
87	3	0.0	1	0 3
88	3	0.0	1	1 2
89	3	0.0	1	1 2
90	3	0.0	1	0 3
91	5	0.0	1	2 3
92	2	0.0	1	1 1
93	3	0.0	1	2 1
94	3	0.0	1	0 3
95	1	0.0	1	0 1
96	3	0.0	1	1 2
97	2	0.0	1	1 1
98	2	0.0	1	1 1
99	2	0.0	1	0 2
100	1	0.0	1	0 1
103	2	0.0	1	1 1
104	6	0.0	1	0 6
105	7	0.0	1	1 6
106	5	0.0	1	2 3
107	1	0.0	1	0 1
108	3	0.0	1	2 1
109	1	0.0	1	0 1
110	3	0.0	1	0 3
111	2	0.0	1	1 1
112	1	0.0	1	0 1
115	2	0.0	1	0 2
117	1	0.0	1	0 1
118	1	0.0	1	0 1
122	1	0.0	1	0 1
123	2	0.0	1	0 2
134	1	0.0	1	0 1
145	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad22/host_removal/benchmark-bad22_R2.fastq.gz
=============================================
228892 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad22_R1_trimmed.fq.gz and benchmark-bad22_R2_trimmed.fq.gz
file_1: benchmark-bad22_R1_trimmed.fq.gz, file_2: benchmark-bad22_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad22_R1_trimmed.fq.gz and benchmark-bad22_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad22_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad22_R2_val_2.fq.gz

Total number of sequences analysed: 228892

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 16400 (7.16%)


  >>> Now running FastQC on the validated data benchmark-bad22_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad22_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad22_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad22_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad22_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad22_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad22_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad22_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad22_R1_trimmed.fq.gz and benchmark-bad22_R2_trimmed.fq.gz

====================================================================================================

