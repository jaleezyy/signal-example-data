Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad21/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad21/host_removal/benchmark-bad21_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	14	CTGTCTCTTATA	135970	0.01
Illumina	0	AGATCGGAAGAGC	135970	0.00
smallRNA	0	TGGAATTCTCGG	135970	0.00
Using Nextera adapter for trimming (count: 14). Second best hit was Illumina (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad21/adapter_trimmed/benchmark-bad21_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad21/host_removal/benchmark-bad21_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad21_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad21/host_removal/benchmark-bad21_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad21/host_removal/benchmark-bad21_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 2.756 s (20.270 µs/read; 2.96 M reads/minute).

=== Summary ===

Total reads processed:                 135,970
Reads with adapters:                    20,375 (15.0%)
Reads written (passing filters):       135,970 (100.0%)

Total basepairs processed:    19,229,081 bp
Quality-trimmed:                 115,411 bp (0.6%)
Total written (filtered):     19,086,312 bp (99.3%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 20375 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 46.2%
  C: 16.1%
  G: 17.2%
  T: 20.5%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	16695	33992.5	0	16695
2	2718	8498.1	0	2718
3	730	2124.5	0	730
4	96	531.1	0	96
5	83	132.8	0	83
6	5	33.2	0	5
7	2	8.3	0	2
11	3	0.0	1	1 2
16	1	0.0	1	1
17	1	0.0	1	0 1
19	1	0.0	1	0 1
20	1	0.0	1	0 1
21	1	0.0	1	0 1
23	2	0.0	1	0 2
24	2	0.0	1	0 2
25	3	0.0	1	1 2
26	1	0.0	1	0 1
29	1	0.0	1	0 1
32	3	0.0	1	2 1
33	1	0.0	1	1
37	1	0.0	1	0 1
38	1	0.0	1	0 1
39	1	0.0	1	0 1
40	1	0.0	1	1
47	1	0.0	1	1
53	2	0.0	1	1 1
55	1	0.0	1	0 1
59	2	0.0	1	2
63	1	0.0	1	0 1
70	1	0.0	1	1
71	1	0.0	1	0 1
74	2	0.0	1	0 2
75	1	0.0	1	0 1
76	1	0.0	1	1
81	1	0.0	1	0 1
87	1	0.0	1	0 1
88	1	0.0	1	1
89	1	0.0	1	0 1
92	1	0.0	1	0 1
94	1	0.0	1	0 1
96	1	0.0	1	0 1
105	1	0.0	1	1

RUN STATISTICS FOR INPUT FILE: benchmark-bad21/host_removal/benchmark-bad21_R1.fastq.gz
=============================================
135970 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad21/adapter_trimmed/benchmark-bad21_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad21/host_removal/benchmark-bad21_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad21_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad21/host_removal/benchmark-bad21_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad21/host_removal/benchmark-bad21_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 3.047 s (22.407 µs/read; 2.68 M reads/minute).

=== Summary ===

Total reads processed:                 135,970
Reads with adapters:                    24,586 (18.1%)
Reads written (passing filters):       135,970 (100.0%)

Total basepairs processed:    19,400,448 bp
Quality-trimmed:                 162,482 bp (0.8%)
Total written (filtered):     19,146,605 bp (98.7%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 24586 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 39.7%
  C: 19.5%
  G: 18.4%
  T: 22.4%
  none/other: 0.1%

Overview of removed sequences
length	count	expect	max.err	error counts
1	18395	33992.5	0	18395
2	3746	8498.1	0	3746
3	1026	2124.5	0	1026
4	214	531.1	0	214
5	114	132.8	0	114
6	13	33.2	0	13
7	8	8.3	0	8
9	2	0.5	0	2
10	2	0.1	1	0 2
11	24	0.0	1	5 19
12	3	0.0	1	1 2
13	16	0.0	1	2 14
14	6	0.0	1	0 6
15	24	0.0	1	4 20
16	7	0.0	1	0 7
17	19	0.0	1	3 16
18	4	0.0	1	1 3
19	4	0.0	1	1 3
20	14	0.0	1	1 13
21	9	0.0	1	1 8
22	11	0.0	1	2 9
23	26	0.0	1	4 22
24	6	0.0	1	1 5
25	8	0.0	1	1 7
26	8	0.0	1	0 8
27	6	0.0	1	2 4
28	8	0.0	1	2 6
29	18	0.0	1	4 14
30	10	0.0	1	4 6
31	7	0.0	1	4 3
32	21	0.0	1	1 20
33	20	0.0	1	5 15
34	20	0.0	1	4 16
35	34	0.0	1	3 31
36	5	0.0	1	0 5
37	4	0.0	1	0 4
38	3	0.0	1	0 3
39	2	0.0	1	1 1
40	5	0.0	1	0 5
41	8	0.0	1	2 6
42	11	0.0	1	2 9
43	7	0.0	1	3 4
44	11	0.0	1	1 10
45	17	0.0	1	0 17
46	18	0.0	1	7 11
47	13	0.0	1	2 11
48	9	0.0	1	2 7
49	11	0.0	1	3 8
50	6	0.0	1	1 5
51	13	0.0	1	3 10
52	7	0.0	1	0 7
53	18	0.0	1	3 15
54	14	0.0	1	2 12
55	12	0.0	1	2 10
56	10	0.0	1	0 10
57	14	0.0	1	0 14
58	9	0.0	1	1 8
59	11	0.0	1	1 10
60	8	0.0	1	1 7
61	10	0.0	1	2 8
62	9	0.0	1	2 7
63	6	0.0	1	3 3
64	12	0.0	1	3 9
65	15	0.0	1	5 10
66	9	0.0	1	6 3
67	13	0.0	1	1 12
68	15	0.0	1	4 11
69	6	0.0	1	1 5
70	12	0.0	1	1 11
71	9	0.0	1	3 6
72	19	0.0	1	4 15
73	14	0.0	1	4 10
74	12	0.0	1	0 12
75	16	0.0	1	1 15
76	15	0.0	1	2 13
77	18	0.0	1	3 15
78	10	0.0	1	1 9
79	18	0.0	1	3 15
80	11	0.0	1	3 8
81	10	0.0	1	2 8
82	8	0.0	1	4 4
83	16	0.0	1	2 14
84	5	0.0	1	1 4
85	7	0.0	1	1 6
86	11	0.0	1	4 7
87	14	0.0	1	3 11
88	5	0.0	1	1 4
89	11	0.0	1	2 9
90	6	0.0	1	0 6
91	4	0.0	1	2 2
92	2	0.0	1	0 2
93	8	0.0	1	2 6
94	12	0.0	1	1 11
95	4	0.0	1	1 3
96	9	0.0	1	1 8
97	3	0.0	1	0 3
98	11	0.0	1	2 9
99	5	0.0	1	0 5
100	6	0.0	1	2 4
101	7	0.0	1	0 7
102	5	0.0	1	0 5
103	3	0.0	1	0 3
104	6	0.0	1	1 5
105	11	0.0	1	1 10
106	11	0.0	1	2 9
107	6	0.0	1	0 6
108	1	0.0	1	0 1
109	5	0.0	1	0 5
110	3	0.0	1	0 3
111	2	0.0	1	1 1
112	2	0.0	1	1 1
114	4	0.0	1	0 4
115	1	0.0	1	0 1
116	2	0.0	1	0 2
117	3	0.0	1	1 2
119	2	0.0	1	0 2
120	1	0.0	1	0 1
121	2	0.0	1	0 2
122	3	0.0	1	1 2
124	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad21/host_removal/benchmark-bad21_R2.fastq.gz
=============================================
135970 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad21_R1_trimmed.fq.gz and benchmark-bad21_R2_trimmed.fq.gz
file_1: benchmark-bad21_R1_trimmed.fq.gz, file_2: benchmark-bad21_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad21_R1_trimmed.fq.gz and benchmark-bad21_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad21_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad21_R2_val_2.fq.gz

Total number of sequences analysed: 135970

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 976 (0.72%)


  >>> Now running FastQC on the validated data benchmark-bad21_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad21_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad21_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad21_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad21_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad21_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad21_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad21_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad21_R1_trimmed.fq.gz and benchmark-bad21_R2_trimmed.fq.gz

====================================================================================================

