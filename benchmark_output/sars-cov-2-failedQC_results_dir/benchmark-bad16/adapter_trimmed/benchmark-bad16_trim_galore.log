Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad16/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> benchmark-bad16/host_removal/benchmark-bad16_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Nextera	60	CTGTCTCTTATA	314516	0.02
Illumina	4	AGATCGGAAGAGC	314516	0.00
smallRNA	0	TGGAATTCTCGG	314516	0.00
Using Nextera adapter for trimming (count: 60). Second best hit was Illumina (count: 4)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad16/adapter_trimmed/benchmark-bad16_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad16/host_removal/benchmark-bad16_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to benchmark-bad16_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad16/host_removal/benchmark-bad16_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad16/host_removal/benchmark-bad16_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 5.966 s (18.968 µs/read; 3.16 M reads/minute).

=== Summary ===

Total reads processed:                 314,516
Reads with adapters:                   131,157 (41.7%)
Reads written (passing filters):       314,516 (100.0%)

Total basepairs processed:    45,455,444 bp
Quality-trimmed:                 109,905 bp (0.2%)
Total written (filtered):     45,168,772 bp (99.4%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 131157 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 46.8%
  C: 17.9%
  G: 17.2%
  T: 18.1%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	114357	78629.0	0	114357
2	11304	19657.2	0	11304
3	3808	4914.3	0	3808
4	1140	1228.6	0	1140
5	194	307.1	0	194
6	57	76.8	0	57
7	8	19.2	0	8
8	10	4.8	0	10
9	8	1.2	0	6 2
10	6	0.3	1	3 3
11	12	0.1	1	1 11
12	5	0.0	1	0 5
13	14	0.0	1	12 2
14	2	0.0	1	2
15	5	0.0	1	4 1
16	1	0.0	1	0 1
17	2	0.0	1	0 2
19	2	0.0	1	0 2
20	3	0.0	1	0 3
21	4	0.0	1	1 3
22	1	0.0	1	0 1
23	1	0.0	1	0 1
24	1	0.0	1	1
26	1	0.0	1	0 1
28	1	0.0	1	0 1
29	1	0.0	1	0 1
30	2	0.0	1	1 1
31	1	0.0	1	0 1
32	1	0.0	1	1
34	1	0.0	1	0 1
35	1	0.0	1	0 1
36	2	0.0	1	1 1
37	2	0.0	1	1 1
38	1	0.0	1	0 1
39	1	0.0	1	0 1
40	1	0.0	1	0 1
41	2	0.0	1	0 2
42	1	0.0	1	0 1
44	1	0.0	1	0 1
45	1	0.0	1	0 1
48	1	0.0	1	0 1
49	1	0.0	1	0 1
54	1	0.0	1	0 1
55	2	0.0	1	0 2
56	2	0.0	1	0 2
59	1	0.0	1	0 1
61	2	0.0	1	1 1
63	3	0.0	1	0 3
64	3	0.0	1	0 3
65	1	0.0	1	0 1
66	1	0.0	1	0 1
67	3	0.0	1	1 2
68	4	0.0	1	1 3
69	3	0.0	1	0 3
70	4	0.0	1	0 4
71	2	0.0	1	0 2
73	1	0.0	1	0 1
74	3	0.0	1	1 2
75	1	0.0	1	0 1
76	11	0.0	1	5 6
77	9	0.0	1	1 8
78	18	0.0	1	2 16
79	16	0.0	1	1 15
80	2	0.0	1	0 2
81	2	0.0	1	0 2
82	3	0.0	1	0 3
83	1	0.0	1	0 1
84	3	0.0	1	0 3
85	2	0.0	1	0 2
86	1	0.0	1	0 1
87	3	0.0	1	1 2
89	1	0.0	1	0 1
94	1	0.0	1	1
95	1	0.0	1	1
101	1	0.0	1	0 1
102	1	0.0	1	0 1
103	2	0.0	1	0 2
106	1	0.0	1	0 1
107	2	0.0	1	0 2
108	1	0.0	1	0 1
110	1	0.0	1	0 1
112	1	0.0	1	0 1
115	2	0.0	1	0 2
116	1	0.0	1	0 1
117	1	0.0	1	0 1
119	1	0.0	1	0 1
121	1	0.0	1	0 1
123	1	0.0	1	1
126	1	0.0	1	1
127	1	0.0	1	0 1
128	2	0.0	1	1 1
130	1	0.0	1	0 1
131	1	0.0	1	0 1
132	1	0.0	1	1
133	2	0.0	1	0 2
135	1	0.0	1	0 1
137	1	0.0	1	0 1
139	1	0.0	1	1
141	1	0.0	1	1
143	1	0.0	1	0 1
144	2	0.0	1	1 1
148	1	0.0	1	0 1
149	1	0.0	1	0 1
151	1	0.0	1	0 1
155	2	0.0	1	0 2
157	1	0.0	1	0 1
158	1	0.0	1	0 1
160	1	0.0	1	0 1
161	1	0.0	1	0 1
163	1	0.0	1	0 1
164	2	0.0	1	0 2
167	1	0.0	1	0 1
170	1	0.0	1	0 1
171	1	0.0	1	0 1
173	2	0.0	1	0 2
178	2	0.0	1	1 1
183	1	0.0	1	0 1
184	2	0.0	1	0 2
185	1	0.0	1	0 1
187	1	0.0	1	0 1
189	1	0.0	1	0 1
191	2	0.0	1	0 2
192	1	0.0	1	1
193	1	0.0	1	0 1
196	1	0.0	1	0 1
197	2	0.0	1	0 2
198	2	0.0	1	0 2
200	1	0.0	1	0 1
201	2	0.0	1	1 1
203	1	0.0	1	0 1
205	2	0.0	1	0 2
206	1	0.0	1	0 1
211	1	0.0	1	0 1
212	1	0.0	1	1
216	1	0.0	1	0 1
220	1	0.0	1	0 1

RUN STATISTICS FOR INPUT FILE: benchmark-bad16/host_removal/benchmark-bad16_R1.fastq.gz
=============================================
314516 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/sars-cov-2-failedQC_results_dir/benchmark-bad16/adapter_trimmed/benchmark-bad16_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: benchmark-bad16/host_removal/benchmark-bad16_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to benchmark-bad16_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file benchmark-bad16/host_removal/benchmark-bad16_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA benchmark-bad16/host_removal/benchmark-bad16_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 6.360 s (20.221 µs/read; 2.97 M reads/minute).

=== Summary ===

Total reads processed:                 314,516
Reads with adapters:                   133,160 (42.3%)
Reads written (passing filters):       314,516 (100.0%)

Total basepairs processed:    45,537,933 bp
Quality-trimmed:                 282,038 bp (0.6%)
Total written (filtered):     45,074,352 bp (99.0%)

=== Adapter 1 ===

Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 133160 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-12 bp: 1

Bases preceding removed adapters:
  A: 46.1%
  C: 18.2%
  G: 17.5%
  T: 18.3%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	115394	78629.0	0	115394
2	11646	19657.2	0	11646
3	3870	4914.3	0	3870
4	1211	1228.6	0	1211
5	458	307.1	0	458
6	45	76.8	0	45
7	79	19.2	0	79
8	9	4.8	0	9
9	9	1.2	0	7 2
10	13	0.3	1	4 9
11	10	0.1	1	2 8
12	13	0.0	1	4 9
13	23	0.0	1	9 14
14	9	0.0	1	3 6
15	14	0.0	1	7 7
16	12	0.0	1	2 10
17	4	0.0	1	4
18	8	0.0	1	3 5
19	12	0.0	1	1 11
20	3	0.0	1	0 3
21	11	0.0	1	2 9
22	6	0.0	1	1 5
23	2	0.0	1	1 1
24	7	0.0	1	0 7
25	5	0.0	1	1 4
26	2	0.0	1	0 2
27	3	0.0	1	3
28	7	0.0	1	1 6
29	4	0.0	1	1 3
30	4	0.0	1	3 1
31	1	0.0	1	0 1
32	4	0.0	1	3 1
33	10	0.0	1	2 8
34	8	0.0	1	0 8
35	11	0.0	1	2 9
36	6	0.0	1	1 5
37	7	0.0	1	0 7
38	4	0.0	1	0 4
39	5	0.0	1	2 3
40	5	0.0	1	0 5
41	1	0.0	1	0 1
42	2	0.0	1	1 1
43	4	0.0	1	1 3
44	5	0.0	1	2 3
45	8	0.0	1	5 3
46	3	0.0	1	2 1
47	5	0.0	1	0 5
48	7	0.0	1	3 4
49	3	0.0	1	1 2
50	3	0.0	1	1 2
51	6	0.0	1	0 6
53	3	0.0	1	1 2
54	2	0.0	1	1 1
55	6	0.0	1	0 6
56	1	0.0	1	0 1
57	4	0.0	1	1 3
58	3	0.0	1	0 3
59	3	0.0	1	0 3
60	3	0.0	1	2 1
62	1	0.0	1	0 1
64	1	0.0	1	0 1
67	2	0.0	1	0 2
68	1	0.0	1	0 1
70	1	0.0	1	1
72	5	0.0	1	2 3
73	2	0.0	1	0 2
74	2	0.0	1	0 2
75	4	0.0	1	1 3
77	2	0.0	1	1 1
78	3	0.0	1	2 1
79	2	0.0	1	0 2
80	8	0.0	1	2 6
81	13	0.0	1	4 9
82	14	0.0	1	3 11
83	10	0.0	1	1 9
84	1	0.0	1	0 1
85	4	0.0	1	3 1
86	1	0.0	1	1
88	1	0.0	1	0 1
89	1	0.0	1	0 1
90	3	0.0	1	0 3
91	1	0.0	1	0 1
95	1	0.0	1	0 1
96	1	0.0	1	1
99	1	0.0	1	0 1
100	1	0.0	1	0 1
102	1	0.0	1	0 1
104	1	0.0	1	0 1
108	1	0.0	1	0 1
109	1	0.0	1	1
112	1	0.0	1	0 1
113	1	0.0	1	0 1
114	1	0.0	1	0 1
116	1	0.0	1	0 1
117	1	0.0	1	1
123	1	0.0	1	0 1
124	1	0.0	1	0 1
125	2	0.0	1	0 2
126	1	0.0	1	0 1
129	1	0.0	1	0 1
134	1	0.0	1	0 1
136	1	0.0	1	0 1
138	1	0.0	1	0 1
139	1	0.0	1	0 1
141	2	0.0	1	0 2
145	1	0.0	1	0 1
147	1	0.0	1	0 1
150	1	0.0	1	0 1
155	1	0.0	1	0 1
161	1	0.0	1	0 1
169	1	0.0	1	0 1
173	1	0.0	1	0 1
174	1	0.0	1	1
176	1	0.0	1	0 1
177	1	0.0	1	0 1
178	1	0.0	1	0 1
184	1	0.0	1	0 1
188	1	0.0	1	1
189	1	0.0	1	0 1
191	2	0.0	1	2
192	1	0.0	1	0 1
193	1	0.0	1	1
199	2	0.0	1	0 2
200	1	0.0	1	0 1
206	1	0.0	1	0 1
208	1	0.0	1	1
216	1	0.0	1	0 1
217	2	0.0	1	0 2

RUN STATISTICS FOR INPUT FILE: benchmark-bad16/host_removal/benchmark-bad16_R2.fastq.gz
=============================================
314516 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files benchmark-bad16_R1_trimmed.fq.gz and benchmark-bad16_R2_trimmed.fq.gz
file_1: benchmark-bad16_R1_trimmed.fq.gz, file_2: benchmark-bad16_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: benchmark-bad16_R1_trimmed.fq.gz and benchmark-bad16_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to benchmark-bad16_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to benchmark-bad16_R2_val_2.fq.gz

Total number of sequences analysed: 314516

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 334 (0.11%)


  >>> Now running FastQC on the validated data benchmark-bad16_R1_val_1.fq.gz<<<

Started analysis of benchmark-bad16_R1_val_1.fq.gz
Approx 5% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 10% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 15% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 20% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 25% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 30% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 35% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 40% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 45% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 50% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 55% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 60% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 65% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 70% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 75% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 80% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 85% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 90% complete for benchmark-bad16_R1_val_1.fq.gz
Approx 95% complete for benchmark-bad16_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data benchmark-bad16_R2_val_2.fq.gz<<<

Started analysis of benchmark-bad16_R2_val_2.fq.gz
Approx 5% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 10% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 15% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 20% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 25% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 30% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 35% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 40% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 45% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 50% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 55% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 60% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 65% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 70% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 75% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 80% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 85% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 90% complete for benchmark-bad16_R2_val_2.fq.gz
Approx 95% complete for benchmark-bad16_R2_val_2.fq.gz
Deleting both intermediate output files benchmark-bad16_R1_trimmed.fq.gz and benchmark-bad16_R2_trimmed.fq.gz

====================================================================================================

