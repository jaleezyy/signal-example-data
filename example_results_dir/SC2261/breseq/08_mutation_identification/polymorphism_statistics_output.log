ARGUMENT 'total_length=29903' __ignored__

ARGUMENT 'in_file=SC2261/breseq/08_mutation_identification/polymorphism_statistics_input.tab' __ignored__

ARGUMENT 'out_file=SC2261/breseq/08_mutation_identification/polymorphism_statistics_output.tab' __ignored__

ARGUMENT 'qual_file=SC2261/breseq/08_mutation_identification/error_counts.tab' __ignored__


R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ##
> ## AUTHORS
> ##
> ## Jeffrey E. Barrick <jeffrey.e.barrick@gmail.com>
> ##
> ## LICENSE AND COPYRIGHT
> ##
> ## Copyright (c) 2008-2010 Michigan State University
> ## Copyright (c) 2011-2017 The University of Texas at Austin
> ##
> ## breseq is free software; you can redistribute it and/or modify it under the
> ## terms the GNU General Public License as published by the Free Software
> ## Foundation; either version 1, or (at your option) any later version.
> ##
> ##
> 
> ## Args should be in_file=/path/to/input out_file=/path/to/output total_length=<total_length_of_sequences>  qual_file=
> 
> ##error_count_file=/path/to/error_count
> 
> for (e in commandArgs()) {
+   ta = strsplit(e,"=",fixed=TRUE)
+   if(! is.na(ta[[1]][2])) {
+     temp = ta[[1]][2]
+  #   temp = as.numeric(temp) #Im only inputting numbers so I added this to recognize scientific notation
+     if(substr(ta[[1]][1],nchar(ta[[1]][1]),nchar(ta[[1]][1])) == "I") {
+       temp = as.integer(temp)
+     }
+     if(substr(ta[[1]][1],nchar(ta[[1]][1]),nchar(ta[[1]][1])) == "N") {
+       temp = as.numeric(temp)
+     }
+     assign(ta[[1]][1],temp)
+     cat("assigned ",ta[[1]][1]," the value of |",temp,"|\n")
+   } else {
+     assign(ta[[1]][1],TRUE)
+     cat("assigned ",ta[[1]][1]," the value of TRUE\n")
+   }
+ }
assigned  /workspace/home/nasirja/covid-19-signal/.snakemake/conda/1f267c8dfdaa0356ebaad13adc66d00a/lib/R/bin/exec/R  the value of TRUE
assigned  --vanilla  the value of TRUE
assigned  total_length  the value of | 29903 |
assigned  in_file  the value of | SC2261/breseq/08_mutation_identification/polymorphism_statistics_input.tab |
assigned  out_file  the value of | SC2261/breseq/08_mutation_identification/polymorphism_statistics_output.tab |
assigned  qual_file  the value of | SC2261/breseq/08_mutation_identification/error_counts.tab |
> 
> 
> total_length = as.numeric(total_length);
> 
> 
> X<-read.table(in_file, sep="\t", header=T)
> #print(X)
> 
> ##allocate output data frame
> Y<-data.frame(
+   ks_quality_p_value = 1:length(X$major_frequency)
+ );
> 
> qual_dist<-read.table(qual_file, sep="\t", header=F)
> print(qual_dist)
        V1
1        0
2        0
3        0
4        0
5        0
6        0
7        0
8        0
9        0
10     364
11  139571
12  585547
13 2269320
14 1729997
15 1145863
16 2497174
17       0
18      86
19     384
20   54756
21  603314
22  404558
23  833095
24  270795
25  351354
26  185821
27 3701451
28  326384
29   46238
30 3511352
31 3034932
32 1344313
33 1790814
34 4026551
35 4918594
36 2537946
37 4345296
38 1972114
39   58067
40   93226
> qual_dist<-as.vector(qual_dist$V1);
> 
> qual_dist = ceiling(qual_dist / 1000)
> 
> print(qual_dist)
 [1]    0    0    0    0    0    0    0    0    0    1  140  586 2270 1730 1146
[16] 2498    0    1    1   55  604  405  834  271  352  186 3702  327   47 3512
[31] 3035 1345 1791 4027 4919 2538 4346 1973   59   94
> 
> 
> qual_dist_list = c();
> for (i in 1:length(qual_dist))
+ {
+ 	qual_dist_list = c(qual_dist_list, rep(i, qual_dist[i]));
+ }
> 
> qual_dist = qual_dist / sum(qual_dist)
> qual_cdf = c();
> 
> pr_sum = 0;
> for (i in 1:length(qual_dist))
+ {
+ 	pr_sum = pr_sum + qual_dist[i];
+ 	qual_cdf[i] = pr_sum;		
+ }
> 
> 
> print(qual_cdf)
 [1] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
 [6] 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 2.336722e-05
[11] 3.294777e-03 1.698797e-02 7.003155e-02 1.104568e-01 1.372357e-01
[16] 1.956070e-01 1.956070e-01 1.956303e-01 1.956537e-01 1.969389e-01
[21] 2.110527e-01 2.205164e-01 2.400047e-01 2.463372e-01 2.545624e-01
[26] 2.589088e-01 3.454142e-01 3.530553e-01 3.541535e-01 4.362192e-01
[31] 5.071387e-01 5.385676e-01 5.804183e-01 6.745181e-01 7.894614e-01
[36] 8.487674e-01 9.503213e-01 9.964248e-01 9.978035e-01 1.000000e+00
> 
> qual_pr <- function(qual_cdf = qual_cdf)
+ {
+ 	if (x > length(qual_cdf))
+ 	{
+ 		return(1)
+ 	}
+ 	return (qual_cdf[trunc(x)]);
+ }
> 
> #print(Y)
> 
> if (length(X$major_quals) > 0)
+ {
+ 	for (i in 1:length(X$major_quals))
+ 	{
+ 		#print (i);
+     major_quals_list = c()
+     major_quals = c()
+     #cat(i, " length: ", length(X$major_quals[i]), "\n")
+     if (length(X$major_quals[i]) > 0) {
+       major_quals_list <- strsplit(as.character(X$major_quals[i]), ",");
+       major_quals <- as.numeric( major_quals_list[[1]] )
+     }
+     
+     minor_quals_list = c()
+     minor_quals = c()
+     
+     #cat(i, " length: ", length(X$minor_quals[i]), "\n")
+     if (length(X$minor_quals[i]) > 0) {
+       minor_quals_list <- strsplit(as.character(X$minor_quals[i]), ",");
+       minor_quals <- as.numeric( minor_quals_list[[1]] )
+     }
+ 
+     ##cat("\n")
+     ##print(minor_quals)
+         
+     ## This code estimates the actual strand and quality score distribution as the total observed.
+ #		max_qual = max(major_quals, minor_quals)
+ #		NQ = tabulate(major_quals, nbins=max_qual)
+ #		RQ = tabulate(minor_quals, nbins=max_qual)
+ #		TQ = NQ+RQ
+ #
+ #		log10_qual_likelihood = log10(dmultinom(NQ, prob=TQ)) + log10(dmultinom(RQ, prob=TQ)) - log10(dmultinom(TQ, prob=TQ))
+ #		Y$log10_qual_likelihood_position_model[i] = -log10_qual_likelihood
+ 		
+ #		RS = c(X$major_top_strand[i], X$major_bot_strand[i])
+ #		NS = c(X$minor_top_strand[i], X$minor_bot_strand[i])
+ #		TS = RS+NS
+ 		
+ #		log10_strand_likelihood =  log10(dmultinom(RS, prob=TS)) + log10(dmultinom(NS, prob=TS)) - log10(dmultinom(TS, prob=TS))
+ #		Y$log10_strand_likelihood_position_model[i] = -log10_strand_likelihood
+ 
+ 		#likelihoods are written as NULL model (one base) versus POLYMORPHISM model (mixed bases)
+ 		#log10_base_likelihood should be negative
+ 		#log10_qual_likelihood should be positive
+ 		#log10_strand_likelihood should be positive
+ 
+ 		#convert to natural logarithm and back to log10
+     #score_combined_log =  -2* ( Y$log10_base_likelihood[i]  + Y$log10_qual_likelihood_position_model[i] + Y$log10_strand_likelihood_position_model[i]) * log(10)
+     #Y$quality_position_model[i] = -pchisq(score_combined_log, 1, lower.tail=T, log=T) / log(10)
+ 		
+ 	## This section estimates the actual strand distribution as the reference observations and the quality score distribution from the
+ 	## count across the entire genome for all bases added together (doesn't take into account that there may be more low G's than A's, for example)	
+ 
+ #		max_qual = length(qual_dist)
+ #		NQ = tabulate(best_quals, nbins=max_qual)
+ #		RQ = tabulate(second_best_quals, nbins=max_qual)
+ #		TQ = NQ+RQ
+ #		EQ = RQ+1
+ 						
+ #		log10_qual_likelihood_genome_mode = log10(dmultinom(NQ, prob=EQ)) + log10(dmultinom(RQ, prob=EQ)) - log10(dmultinom(TQ, prob=TQ))
+ #		Y$log10_qual_likelihood_genome_model[i] = -log10_qual_likelihood_genome_mode
+ 
+ #		RS = c(X$ref_top_strand[i], X$ref_bot_strand[i])
+ #		NS = c(X$new_top_strand[i], X$new_bot_strand[i])
+ #		TS = RS + NS
+ 		
+ #		log10_strand_likelihood_genome_mode =  log10(dmultinom(TS, prob=TS+1)) - log10(dmultinom(RS, prob=RS+1)) + log10(dmultinom(NS, prob=RS+1))
+ #		Y$log10_strand_likelihood_genome_model[i] = -log10_strand_likelihood_genome_mode
+ 
+ #		#convert to natural logarithm and back to 
+ #		score_combined_log_genome_mode =  -2 * ( Y$log10_base_likelihood[i] + Y$log10_strand_likelihood_genome_model[i]) * log(10)
+ 
+ #		Y$quality_genome_model[i] = -pchisq(score_combined_log_genome_mode, 1, lower.tail=T, log=T) / log(10)
+ #		score_combined_log_genome_mode =  -2 * ( Y$log10_base_likelihood[i]) * log(10)
+ 		
+ 
+ 		## KS test for unusual qualities -- Rewrite to use cumulative distribution! = faster and more accurate
+ 		all_quals = c(minor_quals,major_quals);
+ 
+ 		options(warn=-1);
+ 
+ 		if (X$major_frequency[i] < 0.5)
+ 		{
+ 			poly_quals = major_quals;
+ 		}
+ 		else
+ 		{
+ 			poly_quals = minor_quals;
+ 		}
+ 
+ ## This one tests the quality scores predicting a polymorphism agains the overall distribution
+ ## at all positions in the genome	
+ #	ks_test_p_value_unusual <- ks.test(qual_dist_list, poly_quals, alternative = "less")
+ #	ks_test_p_value_unusual <- ks_test_p_value_unusual$p.value
+ #	Y$ks_quality_p_value_unusual_poly[i] <- ks_test_p_value_unusual
+ 
+ 
+ #	ks_test_p_value_unusual <- ks.test(qual_dist_list, second_best_quals, alternative = "less")
+ #	ks_test_p_value_unusual <- ks_test_p_value_unusual$p.value
+ #	Y$ks_quality_p_value_unusual_ref[i] <- ks_test_p_value_unusual
+ 	
+ #	ks_test_p_value_unusual <- ks.test(qual_dist_list, best_quals, alternative = "less")
+ #	ks_test_p_value_unusual <- ks_test_p_value_unusual$p.value
+ #	Y$ks_quality_p_value_unusual_new[i] <- ks_test_p_value_unusual
+ 
+ #	ks_test_p_value_unusual <- ks.test(qual_dist_list, all_quals, alternative = "less")
+ #	ks_test_p_value_unusual <- ks_test_p_value_unusual$p.value
+ #	Y$ks_quality_p_value_unusual_all[i] <- ks_test_p_value_unusual
+ 
+ 	## Oldest code that calculates bias p-values
+ 	
+     options(warn=-1);
+     
+     ks_test_p_value = 1
+     if ((length(minor_quals) > 0) && (length(major_quals) > 0)) {
+       ks_test_result <- ks.test(minor_quals, major_quals, alternative = "less")
+       ks_test_p_value <- ks_test_result$p.value
+     }
+     options(warn=0);
+     
+ 		Y$ks_quality_p_value[i] <- ks_test_p_value
+ 
+ 		contingency_table <- matrix(data=c(X$minor_top_strand[i], X$minor_bot_strand[i], X$major_top_strand[i], X$major_bot_strand[i]), nrow=2, ncol=2)
+ 		#print(contingency_table)
+ 	
+ 		fisher_test_p_value <- fisher.test( contingency_table, alternative="two.sided")
+ 		fisher_test_p_value <- fisher_test_p_value$p.value
+ 		#print(fisher_test_p_value)
+ 	
+ 		Y$fisher_strand_p_value[i] <- fisher_test_p_value
+ 	
+ 		# Fisher's method for combining p-values
+ 		combined_log = - 2* ( log(ks_test_p_value) + log(fisher_test_p_value) )
+ 		Y$bias_p_value[i] = pchisq(combined_log, 2*2, lower.tail=F)
+ 	
+ 		Y$bias_e_value[i] = Y$bias_p_value[i] * total_length
+ 	}
+ }
> 
> Y = signif(Y, digits = 6)
> write.table(Y, out_file, sep="\t", row.names=F, quote=F)
> 
