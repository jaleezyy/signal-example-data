Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.8
Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)
Letting the (modified) Cutadapt deal with the Python version instead
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 2 cores

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)

Output will be written into the directory: /workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/PRJNA689621_subset-input_results_dir/E64/adapter_trimmed/


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> E64/host_removal/E64_R1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	4506	AGATCGGAAGAGC	720396	0.63
smallRNA	0	TGGAATTCTCGG	720396	0.00
Nextera	0	CTGTCTCTTATA	720396	0.00
Using Illumina adapter for trimming (count: 4506). Second best hit was smallRNA (count: 0)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/PRJNA689621_subset-input_results_dir/E64/adapter_trimmed/E64_R1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: E64/host_removal/E64_R1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j 2
Writing final adapter and quality trimmed output to E64_R1_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file E64/host_removal/E64_R1.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC E64/host_removal/E64_R1.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 31.237 s (43.361 µs/read; 1.38 M reads/minute).

=== Summary ===

Total reads processed:                 720,396
Reads with adapters:                   243,159 (33.8%)
Reads written (passing filters):       720,396 (100.0%)

Total basepairs processed:   180,819,396 bp
Quality-trimmed:                 448,904 bp (0.2%)
Total written (filtered):    179,777,655 bp (99.4%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 243159 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 34.6%
  C: 21.6%
  G: 9.2%
  T: 34.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	176477	180099.0	0	176477
2	52764	45024.8	0	52764
3	3731	11256.2	0	3731
4	3094	2814.0	0	3094
5	258	703.5	0	258
6	62	175.9	0	62
7	1799	44.0	0	1799
8	58	11.0	0	58
9	73	2.7	0	73
10	61	0.7	1	59 2
11	38	0.2	1	37 1
12	55	0.0	1	55
13	31	0.0	1	31
14	35	0.0	1	33 2
15	47	0.0	1	44 3
16	23	0.0	1	22 1
17	24	0.0	1	24
18	25	0.0	1	25
19	28	0.0	1	26 2
20	47	0.0	1	46 1
21	10	0.0	1	9 1
22	96	0.0	1	89 7
23	26	0.0	1	24 2
24	327	0.0	1	317 10
25	70	0.0	1	64 6
26	25	0.0	1	25
27	26	0.0	1	20 6
28	182	0.0	1	173 9
29	33	0.0	1	28 5
30	19	0.0	1	18 1
31	26	0.0	1	23 3
32	42	0.0	1	40 2
33	19	0.0	1	18 1
34	25	0.0	1	21 4
35	24	0.0	1	24
36	39	0.0	1	36 3
37	185	0.0	1	180 5
38	59	0.0	1	56 3
39	28	0.0	1	26 2
40	18	0.0	1	18
41	54	0.0	1	53 1
42	118	0.0	1	114 4
43	155	0.0	1	152 3
44	57	0.0	1	51 6
45	98	0.0	1	97 1
46	106	0.0	1	101 5
47	35	0.0	1	33 2
48	22	0.0	1	20 2
49	23	0.0	1	20 3
50	11	0.0	1	9 2
51	18	0.0	1	18
52	19	0.0	1	16 3
53	15	0.0	1	14 1
54	135	0.0	1	134 1
55	32	0.0	1	31 1
56	8	0.0	1	5 3
57	27	0.0	1	26 1
58	10	0.0	1	9 1
59	79	0.0	1	78 1
60	23	0.0	1	22 1
61	12	0.0	1	12
62	13	0.0	1	9 4
63	8	0.0	1	8
64	6	0.0	1	5 1
65	8	0.0	1	7 1
66	10	0.0	1	10
67	10	0.0	1	7 3
68	7	0.0	1	6 1
69	116	0.0	1	115 1
70	60	0.0	1	59 1
71	28	0.0	1	27 1
72	15	0.0	1	12 3
73	30	0.0	1	26 4
74	59	0.0	1	53 6
75	87	0.0	1	77 10
76	446	0.0	1	434 12
77	311	0.0	1	304 7
78	146	0.0	1	139 7
79	73	0.0	1	71 2
80	48	0.0	1	47 1
81	26	0.0	1	24 2
82	27	0.0	1	26 1
83	17	0.0	1	16 1
84	12	0.0	1	12
85	8	0.0	1	8
86	12	0.0	1	11 1
87	7	0.0	1	7
88	18	0.0	1	16 2
89	68	0.0	1	65 3
90	12	0.0	1	12
91	8	0.0	1	8
92	12	0.0	1	12
93	16	0.0	1	15 1
94	85	0.0	1	82 3
95	12	0.0	1	8 4
96	8	0.0	1	7 1
97	5	0.0	1	4 1
98	4	0.0	1	4
99	14	0.0	1	14
100	5	0.0	1	5
101	6	0.0	1	6
102	1	0.0	1	1
103	8	0.0	1	7 1
104	2	0.0	1	2
105	1	0.0	1	1
106	8	0.0	1	8
107	38	0.0	1	37 1
108	13	0.0	1	13
109	3	0.0	1	3
110	3	0.0	1	3
111	5	0.0	1	3 2
112	5	0.0	1	4 1
114	4	0.0	1	4
115	2	0.0	1	2
116	3	0.0	1	3
117	2	0.0	1	2
120	3	0.0	1	3
121	1	0.0	1	0 1
122	1	0.0	1	1
123	2	0.0	1	2
124	2	0.0	1	2
125	3	0.0	1	3
126	1	0.0	1	0 1
127	19	0.0	1	18 1
128	5	0.0	1	4 1
129	1	0.0	1	1
130	2	0.0	1	2
131	2	0.0	1	1 1
132	3	0.0	1	3
133	1	0.0	1	1
135	3	0.0	1	3
136	2	0.0	1	2
138	1	0.0	1	1
141	1	0.0	1	1
142	1	0.0	1	1
148	1	0.0	1	1
149	2	0.0	1	1 1
151	1	0.0	1	1
152	2	0.0	1	2
153	1	0.0	1	1
154	1	0.0	1	1
155	1	0.0	1	1
156	9	0.0	1	9
157	1	0.0	1	1
158	1	0.0	1	1
161	1	0.0	1	1
163	2	0.0	1	1 1
164	1	0.0	1	1
165	2	0.0	1	2
166	2	0.0	1	2
167	3	0.0	1	3
168	1	0.0	1	1
169	1	0.0	1	1
171	1	0.0	1	1
172	1	0.0	1	1
173	1	0.0	1	1
176	2	0.0	1	2
178	2	0.0	1	1 1
179	1	0.0	1	1
181	4	0.0	1	3 1
182	1	0.0	1	1
184	1	0.0	1	1
187	2	0.0	1	2
190	1	0.0	1	1
191	1	0.0	1	1
192	1	0.0	1	1
194	2	0.0	1	2
197	4	0.0	1	3 1
199	1	0.0	1	1
201	1	0.0	1	1
203	1	0.0	1	1
205	2	0.0	1	2
207	1	0.0	1	1
211	1	0.0	1	1
212	1	0.0	1	1
216	1	0.0	1	1
224	1	0.0	1	1
251	10	0.0	1	0 10

RUN STATISTICS FOR INPUT FILE: E64/host_removal/E64_R1.fastq.gz
=============================================
720396 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to '/workspace/lab/mcarthurlab/nasirja/covid-19-signal/benchmark_output/PRJNA689621_subset-input_results_dir/E64/adapter_trimmed/E64_R2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: E64/host_removal/E64_R2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.6.4_dev
Cutadapt version: 4.8
Python version: could not detect
Number of cores used for trimming: 2
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.8). Setting -j -j 2
Writing final adapter and quality trimmed output to E64_R2_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file E64/host_removal/E64_R2.fastq.gz <<< 
This is cutadapt 4.8 with Python 3.12.3
Command line parameters: -j 2 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC E64/host_removal/E64_R2.fastq.gz
Processing single-end reads on 2 cores ...
Finished in 32.177 s (44.665 µs/read; 1.34 M reads/minute).

=== Summary ===

Total reads processed:                 720,396
Reads with adapters:                   244,713 (34.0%)
Reads written (passing filters):       720,396 (100.0%)

Total basepairs processed:   180,819,396 bp
Quality-trimmed:               1,953,833 bp (1.1%)
Total written (filtered):    178,347,866 bp (98.6%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 244713 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 39.6%
  C: 19.8%
  G: 9.0%
  T: 31.6%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
1	187852	180099.0	0	187852
2	42271	45024.8	0	42271
3	5424	11256.2	0	5424
4	2592	2814.0	0	2592
5	245	703.5	0	245
6	65	175.9	0	65
7	1719	44.0	0	1719
8	26	11.0	0	26
9	66	2.7	0	66
10	79	0.7	1	70 9
11	18	0.2	1	16 2
12	71	0.0	1	64 7
13	18	0.0	1	16 2
14	61	0.0	1	57 4
15	27	0.0	1	20 7
16	20	0.0	1	20
17	29	0.0	1	28 1
18	10	0.0	1	7 3
19	40	0.0	1	39 1
20	33	0.0	1	32 1
21	11	0.0	1	9 2
22	83	0.0	1	81 2
23	36	0.0	1	31 5
24	369	0.0	1	352 17
25	9	0.0	1	8 1
26	40	0.0	1	37 3
27	73	0.0	1	71 2
28	136	0.0	1	129 7
29	11	0.0	1	9 2
30	54	0.0	1	51 3
31	15	0.0	1	14 1
32	51	0.0	1	49 2
33	51	0.0	1	49 2
34	26	0.0	1	24 2
35	39	0.0	1	38 1
36	94	0.0	1	89 5
37	182	0.0	1	179 3
38	41	0.0	1	39 2
39	68	0.0	1	65 3
40	66	0.0	1	66
41	87	0.0	1	85 2
42	270	0.0	1	264 6
43	281	0.0	1	279 2
44	268	0.0	1	263 5
45	207	0.0	1	205 2
46	100	0.0	1	100
47	132	0.0	1	131 1
48	50	0.0	1	50
49	39	0.0	1	39
50	21	0.0	1	21
51	29	0.0	1	29
52	15	0.0	1	15
53	27	0.0	1	27
54	95	0.0	1	91 4
55	22	0.0	1	21 1
56	42	0.0	1	41 1
57	104	0.0	1	100 4
58	63	0.0	1	61 2
59	21	0.0	1	20 1
60	25	0.0	1	25
61	5	0.0	1	5
62	4	0.0	1	4
63	5	0.0	1	5
64	6	0.0	1	6
65	4	0.0	1	4
68	1	0.0	1	1
69	21	0.0	1	21
70	27	0.0	1	25 2
71	3	0.0	1	3
72	1	0.0	1	1
73	6	0.0	1	6
74	4	0.0	1	4
75	10	0.0	1	9 1
76	6	0.0	1	6
77	11	0.0	1	11
78	17	0.0	1	16 1
79	18	0.0	1	15 3
80	56	0.0	1	51 5
81	47	0.0	1	42 5
82	35	0.0	1	34 1
83	28	0.0	1	20 8
84	26	0.0	1	20 6
85	19	0.0	1	16 3
86	12	0.0	1	10 2
87	11	0.0	1	9 2
88	10	0.0	1	10
89	40	0.0	1	40
90	8	0.0	1	5 3
91	9	0.0	1	6 3
92	4	0.0	1	4
93	9	0.0	1	8 1
94	53	0.0	1	51 2
95	10	0.0	1	10
96	1	0.0	1	1
97	4	0.0	1	4
98	3	0.0	1	3
99	8	0.0	1	7 1
100	3	0.0	1	3
101	2	0.0	1	2
102	3	0.0	1	3
103	4	0.0	1	4
105	1	0.0	1	1
106	3	0.0	1	3
107	25	0.0	1	25
108	8	0.0	1	7 1
109	1	0.0	1	1
110	1	0.0	1	1
111	1	0.0	1	1
112	1	0.0	1	1
113	3	0.0	1	2 1
114	3	0.0	1	1 2
116	1	0.0	1	1
119	1	0.0	1	1
120	2	0.0	1	1 1
121	1	0.0	1	1
122	2	0.0	1	1 1
123	1	0.0	1	1
125	3	0.0	1	2 1
127	14	0.0	1	14
128	2	0.0	1	2
131	2	0.0	1	1 1
132	1	0.0	1	1
133	1	0.0	1	1
134	1	0.0	1	0 1
135	2	0.0	1	2
136	2	0.0	1	1 1
137	1	0.0	1	1
139	1	0.0	1	1
147	1	0.0	1	1
148	1	0.0	1	1
150	1	0.0	1	0 1
152	1	0.0	1	1
153	5	0.0	1	4 1
156	6	0.0	1	5 1
160	2	0.0	1	1 1
162	2	0.0	1	1 1
164	1	0.0	1	0 1
165	2	0.0	1	2
166	1	0.0	1	1
167	3	0.0	1	1 2
168	1	0.0	1	1
170	1	0.0	1	1
171	1	0.0	1	1
172	1	0.0	1	1
176	1	0.0	1	1
181	1	0.0	1	1
182	2	0.0	1	2
185	1	0.0	1	1
192	2	0.0	1	2
193	1	0.0	1	1
197	1	0.0	1	1
198	2	0.0	1	1 1
199	1	0.0	1	1
203	1	0.0	1	1
205	1	0.0	1	1
206	1	0.0	1	1
207	1	0.0	1	1
208	2	0.0	1	2
209	1	0.0	1	1
212	2	0.0	1	2
249	1	0.0	1	0 1
251	3	0.0	1	0 3

RUN STATISTICS FOR INPUT FILE: E64/host_removal/E64_R2.fastq.gz
=============================================
720396 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files E64_R1_trimmed.fq.gz and E64_R2_trimmed.fq.gz
file_1: E64_R1_trimmed.fq.gz, file_2: E64_R2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: E64_R1_trimmed.fq.gz and E64_R2_trimmed.fq.gz <<<<<
Writing validated paired-end Read 1 reads to E64_R1_val_1.fq.gz
Writing validated paired-end Read 2 reads to E64_R2_val_2.fq.gz

Total number of sequences analysed: 720396

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 899 (0.12%)


  >>> Now running FastQC on the validated data E64_R1_val_1.fq.gz<<<

Started analysis of E64_R1_val_1.fq.gz
Approx 5% complete for E64_R1_val_1.fq.gz
Approx 10% complete for E64_R1_val_1.fq.gz
Approx 15% complete for E64_R1_val_1.fq.gz
Approx 20% complete for E64_R1_val_1.fq.gz
Approx 25% complete for E64_R1_val_1.fq.gz
Approx 30% complete for E64_R1_val_1.fq.gz
Approx 35% complete for E64_R1_val_1.fq.gz
Approx 40% complete for E64_R1_val_1.fq.gz
Approx 45% complete for E64_R1_val_1.fq.gz
Approx 50% complete for E64_R1_val_1.fq.gz
Approx 55% complete for E64_R1_val_1.fq.gz
Approx 60% complete for E64_R1_val_1.fq.gz
Approx 65% complete for E64_R1_val_1.fq.gz
Approx 70% complete for E64_R1_val_1.fq.gz
Approx 75% complete for E64_R1_val_1.fq.gz
Approx 80% complete for E64_R1_val_1.fq.gz
Approx 85% complete for E64_R1_val_1.fq.gz
Approx 90% complete for E64_R1_val_1.fq.gz
Approx 95% complete for E64_R1_val_1.fq.gz

  >>> Now running FastQC on the validated data E64_R2_val_2.fq.gz<<<

Started analysis of E64_R2_val_2.fq.gz
Approx 5% complete for E64_R2_val_2.fq.gz
Approx 10% complete for E64_R2_val_2.fq.gz
Approx 15% complete for E64_R2_val_2.fq.gz
Approx 20% complete for E64_R2_val_2.fq.gz
Approx 25% complete for E64_R2_val_2.fq.gz
Approx 30% complete for E64_R2_val_2.fq.gz
Approx 35% complete for E64_R2_val_2.fq.gz
Approx 40% complete for E64_R2_val_2.fq.gz
Approx 45% complete for E64_R2_val_2.fq.gz
Approx 50% complete for E64_R2_val_2.fq.gz
Approx 55% complete for E64_R2_val_2.fq.gz
Approx 60% complete for E64_R2_val_2.fq.gz
Approx 65% complete for E64_R2_val_2.fq.gz
Approx 70% complete for E64_R2_val_2.fq.gz
Approx 75% complete for E64_R2_val_2.fq.gz
Approx 80% complete for E64_R2_val_2.fq.gz
Approx 85% complete for E64_R2_val_2.fq.gz
Approx 90% complete for E64_R2_val_2.fq.gz
Approx 95% complete for E64_R2_val_2.fq.gz
Deleting both intermediate output files E64_R1_trimmed.fq.gz and E64_R2_trimmed.fq.gz

====================================================================================================

